"""
See https://dev.opencascade.org/doc/overview/html/occt__tutorial.html
for more details on how this works.

"""
from math import pi
from declaracad.occ.api import (
    Cylinder, Prism, Face, Segment, Arc, Wire, Point,
    Fuse, ThickSolid, Fillet, Transform, Part, Mirror,
    Ellipse, TrimmedCurve
)


enamldef Assembly(Part): part:
    name = "Bottle"

    #: "Parametric" properties of this shape
    attr height = 400.0
    attr width = 200.0
    attr thickness = 100.0
    
    func make_cylinder_surface(radius):
        cylinder = Cylinder(radius=radius)
        cylinder.render()
        return cylinder.topology.faces[0]

    ThickSolid: bottle:
        material = 'diamond'
        # Hollows out the bottle
        #faces << [neck.shape_faces[0]]
        offset << thickness/50.0
        Fuse:
            # Fuse the bottle to the neck
            Cylinder: neck:
                # Bottle neck
                position << (0,0,part.height)
                direction = (0,0,1)
                radius << thickness/4.0
                height << part.height/10.0
            Fillet: body:
                # Bottle, with filleted edges
                radius << thickness/12.0
                Prism:
                    # Create a solid from the bottle face
                    vector << (0,0,height)
                    Face:
                        # Create a face from the base profile
                        Wire:
                            # Create a wire from the profile and mirrored profile
                            Wire: profile:
                                Segment: s1:
                                    points << [ (-width/2.0, 0, 0), (-width/2.0, -thickness/4.0, 0)]
                                Arc:
                                    points = [s1.points[-1],
                                                    (0, -thickness/2.0, 0) ,
                                                    s2.points[-1]]
                                Segment: s2:
                                    points = [(width/2.0, 0, 0), (width/2.0, -thickness/4.0, 0) ]
                            Transform:
                                #: TODO coerce
                                operations = [Mirror(x=1)]
                                shape = profile
    
    Wire:
        TrimmedCurve: c1:
            surface = bottle.topology.faces[0]
            v = 2*pi
            Ellipse: e1:
                position = (2*pi, neck.height/2, 0)
                direction = (2*pi, neck.height/4, 0)
                major_radius = 2*pi
                minor_radius = neck.height / 10
        #Segment: s1:
        #    surface = c1.surface
        #    points = [e1.get_value_at(0), e1.get_value_at(pi)]
    Wire:
        TrimmedCurve:
            surface = bottle.topology.faces[34]
            v = 2*pi
            Ellipse:
                position = e1.position
                direction = e1.direction
                major_radius = e1.major_radius
                minor_radius = e1.minor_radius/4
