"""
Copyright (c) 2017, Jairus Martin.

Distributed under the terms of the GPL v3 License.

The full license is in the file LICENSE, distributed with this software.

Created on Dec 10, 2015

@author: jrm
"""
import inspect
import textwrap
import markdown
from atom.api import Enum
from enaml.core.api import Looper, Conditional
from enaml.widgets.api import  Container, Menu, Action
from enamlx.widgets.api import TreeView, TreeViewItem, TreeViewColumn
from declaracad.core.api import DockItem
from declaracad.core.utils import load_icon
from numpydoc.docscrape import NumpyDocString


def format_docs(src):
    doc = NumpyDocString(src)
    d = doc.get('Summary',[])
    notes = doc.get('Notes')
    if notes:
        d.extend(['##### Notes']+notes)
    attrs = doc.get('Attributes')
    if attrs:
        d.append('##### Attributes')
        for a in attrs:
            if not a:
                continue
            adoc = [x for x in a[2] if x]
            d.append(' - {} {}'.format(a[0],('- ' + "\n".join(adoc)) if adoc else ''))
    examples = doc.get('Examples')
    if examples:
        d.extend(['##### Examples', '```python']+examples+['```'])


    return markdown.markdown("\n".join(d), extensions=[
        'markdown.extensions.fenced_code',
        'markdown.extensions.codehilite',
        'markdown.extensions.tables',
    ])


def get_declared_members(cls):
    inherited = get_inherited_members(cls)
    members = [m for n, m in cls.members().items()
              if not n.startswith("_") and not m in inherited]
    members.sort(key=lambda m:m.name)
    return members


def get_inherited_members(cls):
    inherited = set()
    for base in cls.__bases__:
        if base == cls:
            continue
        for m in base.members().values():
            inherited.add(m)
    members = [m for m in inherited if not m.name.startswith("_")]
    members.sort(key=lambda m: m.name)
    return members


enamldef TreeMemberItem(TreeViewItem):
    attr member # The atom member
    text = member.name
    tool_tip = inspect.getdoc(member)
    TreeViewColumn:
        text = member.__class__.__name__
        tool_tip = ("\n".join(map(str, member.items))
                              if isinstance(member, Enum) else "")


enamldef ToolboxDockItem(DockItem):
    title = 'Toolbox'
    name = 'toolbox-item'
    icon = load_icon('box')
    closable = False



    Container:
        padding = 0
        TreeView: tree:
            horizontal_headers = ['Name', 'Type']
            horizontal_stretch = True
            items << plugin.tools
            Looper:
                iterable << tree.items
                TreeViewItem:
                    attr cls << loop_item.declaration
                    text = cls.__name__
                    tool_tip = format_docs(loop_item.doc)
                    items << get_declared_members(cls) + ['Inherited']
                    Menu:
                        Action:
                            text = "Show reference docs"
                            attr url = (loop_item.proxy.reference.default_value_mode[-1]
                                            if hasattr(loop_item.proxy, 'reference') else '')
                            visible << bool(url)
                            triggered ::
                                docs = plugin.workbench.get_plugin("declaracad.docs")
                                docs.set_url(url)
                        Action:
                            separator = True
                        Action:
                            text = "Show proxy class"
                            attr src = inspect.getsource(loop_item.proxy)
                            visible << bool(src)
                            triggered ::
                                docs = plugin.workbench.get_plugin("declaracad.docs")
                                docs.set_source(src)
                        Action:
                            text = "Show proxy source"
                            attr path = inspect.getfile(loop_item.proxy)
                            visible << bool(path)
                            triggered ::
                                docs = plugin.workbench.get_plugin("declaracad.docs")
                                with open(path) as f:
                                    docs.set_source(f.read())
                        Action:
                            text = "Show declaration class"
                            attr src = inspect.getsource(loop_item.declaration)
                            visible << bool(src)
                            triggered ::
                                docs = plugin.workbench.get_plugin("declaracad.docs")
                                docs.set_source(src)
                    TreeViewColumn:
                        attr base = cls.__bases__[0]
                        text = base.__name__
                        tool_tip = format_docs(inspect.getdoc(base))
                    Looper:
                        iterable << parent.items[:-1]
                        TreeMemberItem:
                            member = loop_item
                    TreeViewItem:
                        text = 'inherited'
                        items << get_inherited_members(cls)
                        Looper:
                            iterable << parent.items
                            TreeMemberItem:
                                member = loop_item
