"""
Copyright (c) 2017, Jairus Martin.

Distributed under the terms of the GPL v3 License.

The full license is in the file LICENSE, distributed with this software.

Created on Dec 10, 2015

@author: jrm
"""
from enaml.layout.api import vbox, hbox, align
from enaml.widgets.api import (
    Container, ObjectCombo, Menu, Action, Field, MultilineField, PushButton
)
from enaml.qt.QtCore import Qt
from enaml.qt.QtGui import QTextCursor
from enaml.application import deferred_call
from enamlx.widgets.api import KeyEvent
from declaracad.core.api import DockItem, log
from declaracad.core.utils import load_icon


from .plugin import CncPlugin, Connection


enamldef CommView(Container): view:
    attr plugin: CncPlugin
    attr connection := plugin.connection
    attr history_index: int = -1
    attr history_limit: int = 40
    initialized ::
        # On startup observe the device connection's last output
        if connection:
            connection.observe('last_read', watch_output)
            connection.observe('last_write', watch_input)

    connection ::
        # When the device connection changes, cleanup, and observe the new last output
        old = change['oldvalue']
        new = change['value']
        if old:
            old.unobserve('last_read', watch_output)
            old.unobserve('last_write', watch_input)
        if new:
            new.observe('last_read', watch_output)
            new.observe('last_write', watch_output)

    func watch_output(change):
        if not plugin.output_enabled:
            return
        widget = comm_log.proxy.widget
        try:
            msg = change['value'].decode()
            widget.moveCursor(QTextCursor.End)
            widget.insertPlainText(msg.strip() if plugin.strip_whitespace else msg)
            widget.moveCursor(QTextCursor.End)
            scroll_to_end()
        except:
            pass # Ignore decode errors

    func watch_input(change):
        if not plugin.input_enabled:
            return
        widget = comm_log.proxy.widget
        try:
            msg = change['value'].decode()
            widget.moveCursor(QTextCursor.End)
            widget.insertPlainText(msg.strip() if plugin.strip_whitespace else msg)
            widget.moveCursor(QTextCursor.End)
            scroll_to_end()
        except:
            pass # Ignore decode errors

    func scroll_to_end():
        if not plugin.autoscroll:
            return
        # Scroll to end
        widget = comm_log.proxy.widget
        scroll_bar = widget.verticalScrollBar()
        scroll_bar.setValue(scroll_bar.maximum())

    func send_text():
        if connection and connection.connected:
            text = to_send.text
            # Add to history
            add_to_history(text)
            msg = text+"\r\n" if plugin.add_newline else text
            deferred_call(connection.write, msg)
            to_send.text = ""

    func add_to_history(text):
        if text:
            # Retain order (most recent first)
            if text in plugin.history:
                plugin.history.remove(text)
            plugin.history.append(text)

            # Keep the size limited
            if len(plugin.history) > history_limit:
                plugin.history.pop(0)
        # Reset
        view.history_index = 0

    Container:
        constraints = [
                vbox(hbox(cmb_conn, btn_open, btn_clear, btn_autoscroll),
                    comm_log,
                    hbox(to_send, btn_send)),
                align('v_center', cmb_conn, btn_open, btn_clear, btn_autoscroll),
                align('v_center', to_send, btn_send),
        ]

        ObjectCombo: cmb_conn:
            items << [None] + plugin.available_connections
            to_string = lambda d: d.name if d else ""
            selected := view.connection
        PushButton: btn_open:
            #text << "Close" if opened else "Open"
            icon << load_icon("disconnect" if connection and connection.connected else "connect")
            tool_tip << "Connected. Click to disconnect" if connection and connection.connected else "Disconnected. Click to Connect"
            clicked ::
                if connection and connection.connected:
                    deferred_call(connection.disconnect)
                else:
                    deferred_call(connection.connect)
        PushButton: btn_clear:
            icon = load_icon("bin")
            tool_tip = "Clear console"
            clicked :: comm_log.proxy.widget.clear()
        PushButton: btn_autoscroll:
            icon << load_icon("lock_open") if plugin.autoscroll else load_icon("lock")
            tool_tip = "Auto scroll"
            checkable = True
            checked := plugin.autoscroll
        MultilineField: comm_log:
            activated ::
                widget = self.proxy.widget
                widget.setReadOnly(True)
                widget.document().setMaximumBlockCount(5000)
        Field: to_send:
            enabled << bool(connection and connection.connected)
            placeholder << "Enter a command.." if enabled else "Disconnected... reconnect first."
            tool_tip = "Press enter to send"
            KeyEvent:
                keys = ['return']
                released :: send_text()
            KeyEvent:
                released ::
                    code = change['value']['code']
                    if len(plugin.history):
                        if code == Qt.Key_Up:
                            n = len(plugin.history)
                            view.history_index = max(-n, history_index-1)
                            to_send.text = plugin.history[view.history_index]
                        elif code == Qt.Key_Down:
                            view.history_index = min(0, history_index+1)
                            if view.history_index == 0:
                                to_send.text = ""
                            else:
                                to_send.text = plugin.history[view.history_index]

        PushButton: btn_send:
            text = "Send"
            enabled << bool(connection and connection.connected)
            clicked :: send_text()



enamldef ComChannelDockItem(DockItem): dock_item:
    title = 'Channel'
    name = 'com-channel-{}'.format(id(self))
    icon = load_icon('disconnect')
    title_bar_right_clicked :: menu.popup()
    CommView:
        padding = 0
        plugin << dock_item.plugin

    Menu: menu:
        Action:
            text = "New com channel view"
            triggered ::
                core = plugin.workbench.get_plugin("enaml.workbench.core")
                core.invoke_command('declaracad.cnc.open_com_channel')
        Action:
            text = "Close com channel view"
            triggered ::
                core = plugin.workbench.get_plugin("enaml.workbench.core")
                core.invoke_command('declaracad.cnc.close_com_channel',
                                    {'target': dock_item.name})

