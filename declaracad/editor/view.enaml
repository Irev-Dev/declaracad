"""
Copyright (c) 2017, Jairus Martin.

Distributed under the terms of the GPL v3 License.

The full license is in the file LICENSE, distributed with this software.

Created on Dec 10, 2015

@author: jrm
"""
import os
import re
import ast as python_ast

from enaml.application import deferred_call
from enaml.core import enaml_ast
from enaml.core.api import Looper, Conditional
from enaml.core.parser import parse
from enaml.colors import parse_color
from enaml.qt.q_resource_helpers import get_cached_qcolor
from enaml.qt.QtCore import Qt
from enaml.layout.api import RetractItem, vbox, hbox, align
from enaml.scintilla.api import Scintilla, ScintillaIndicator, ScintillaMarker
from enaml.scintilla.themes import THEMES
from enaml.scintilla.mono_font import MONO_FONT
from enaml.widgets.api import (
    Container, Timer, MultilineField, Menu, Action, PopupView, Label,
    Field, PushButton, SpinBox
)
from enamlx.widgets.api import KeyEvent, TreeView, TreeViewItem, TreeViewColumn

from declaracad.core.api import DockItem
from declaracad.core.utils import load_icon, load_image, log, format_title
from .plugin import Document



# TODO: Make configurable


def detect_syntax(plugin, path):
    """ Attempt to detect the file syntax """
    p, ext = os.path.splitext(path)
    file_type = ext[1:] if ext else ''
    SYNTAXES = Scintilla.syntax.items
    if file_type in SYNTAXES:
        result = file_type
    else:
        result = plugin.file_associations.get(file_type, '')
    log.info("Detected syntax: {}".format(result))
    return result


def create_indicators(filename, errors):
    """ Create error indicators by reading the traceback """
    results = []

    for line in errors:
        try:
            # From traceback
            m = re.match('File "(.+)", line (\d+)', line.strip())
            if m:
                tag = m.groups()
                if tag[0] not in ("Enaml", filename):
                    continue
            else:
                # From code inspection
                tag = line.split(":")[0:3]
                if len(tag) < 2:
                    continue
            try:
                l = int(tag[1])
            except:
                continue


            color = "#FF0000"
            try:
                c = int(tag[2])
                start = (l-1, 0)
                stop = (l-1, c)
            except:
                start = (l-1, 0)
                stop = (l, 0)
                #color = "#FFFF00"

            results.append(ScintillaIndicator(
                start=start, stop=stop, style="squiggle", color=color,
            ))
        except Exception as e:
            print(e)
    return results


enamldef ErrorPopup(PopupView):
    attr message: str = ""
    attr theme: dict = {"settings": {
        "color": "#000000",
        "paper": "#ffffff",
    }}
    anchor_mode = 'cursor'
    background << theme.get('settings', {}).get('paper', '#ffffff')
    foreground << theme.get('settings', {}).get('color', '#000000')
    anchor = (0.0, 0.0)
    offset = (0, 0)
    timeout = 30
    Container:
        Label:
            foreground << theme.get('settings', {}).get('color', '#000000')
            text = message


enamldef EditorGotoBar(Container): bar:
    attr editor
    constraints = [
        hbox(lbl, sb, pb, cb),
        align('v_center', lbl, sb, pb, cb),
        lbl.height == sb.height == pb.height == cb.height,
    ]
    func go_to_line():
        w = editor.proxy.widget
        n = max(0, sb.value-1)
        w.setCursorPosition(n, 0)
        w.ensureLineVisible(n)
        editor.set_focus()
        editor.show_goto_bar = False
    Label: lbl:
        text = 'Go to line:'
        align = 'right'
    SpinBox: sb:
        activated ::
            self.set_focus()
            self.proxy.widget.selectAll()
        value << editor.cursor_position[0]
        maximum << editor.proxy.widget.lines() if editor.doc.source else 1
        KeyEvent:
            pressed ::
                e = change['value']
                if e['key'] == '\r':
                    deferred_call(go_to_line)
    PushButton: pb:
        icon = load_icon('control_play')
        clicked :: go_to_line()
        KeyEvent:
            pressed ::
                e = change['value']
                if e['key'] == '\r':
                    go_to_line()
    PushButton: cb:
        icon = load_icon('cancel')
        clicked :: editor.show_goto_bar = False


enamldef EditorFindBar(Container): bar:
    attr editor
    attr show_replace: bool = False

    func make_constraints(show_replace):
        constraints = [
            align('v_center', lbl, search, pb1, pb2, pb3, pb4),
            pb1.height == pb2.height == pb3.height ==  pb4.height == search.height,
        ]
        layout = hbox(lbl, search, pb1, pb2, pb3, pb4)
        if show_replace:
            layout = vbox(layout, hbox(lbl2, replace, pb5, pb6, pb7, pb8))
            constraints.extend([
                align('v_center', lbl2, replace, pb5, pb6, pb7, pb8),
                replace.height == search.height,
                replace.width == search.width,
                lbl.width == lbl2.width,
            ])
        constraints.append(layout)
        return constraints

    constraints << make_constraints(show_replace)
    hug_height = 'strong'
    func find_text(**opts):
        if search.text:
            w = editor.proxy.widget
            w.selectAll(False)
            w.findFirst(
                search.text,
                opts.get('re', pb7.checked),
                opts.get('cs', pb6.checked),
                opts.get('wo', pb8.checked),
                opts.get('wrap', True),
                opts.get('forward', True),
                opts.get('line', -1),
                opts.get('index', -1),
                opts.get('show', True),
                opts.get('posix', False),
            )
    func replace_text():
        w = editor.proxy.widget
        if w.hasSelectedText():
            w.replace(replace.text)
    func hide_search_bar():
        if editor.show_find_bar:
            editor.show_find_bar = False
        if editor.show_replace_bar:
            editor.show_replace_bar = False
        editor.proxy.widget.selectAll(False)
        editor.set_focus()
    Label: lbl:
        text = 'Find:'
        align = 'right'
    Field: search:
        text = editor.proxy.widget.selectedText()
        text :: find_text()
        submit_triggers = ['auto_sync', 'return_pressed']
        activated :: search.set_focus()
        KeyEvent:
            pressed ::
                e = change['value']
                k = e['key']
                if k == plugin.key_mapping.get('find', '\x06'):
                    self.proxy.widget.selectAll()
                if k == plugin.key_mapping.get('replace', '\x12'):
                    bar.show_replace = not bar.show_replace
                elif e['key'] == '\r':
                    editor.proxy.widget.findNext()
    PushButton: pb1:
        icon = load_icon("control_rewind")
        tool_tip = 'Find previous'
        clicked ::
            find_text(forward=False)
            editor.proxy.widget.findNext()
    PushButton: pb2:
        icon = load_icon("control_fastforward")
        tool_tip = 'Find next'
        clicked ::
            find_text(forward=True)
            editor.proxy.widget.findNext()
    PushButton: pb3:
        icon << load_icon("control_equalizer")
        tool_tip = 'More options'
        checkable = True
        checked := show_replace
    PushButton: pb4:
        icon << load_icon('cancel')
        tool_tip = 'Hide search bar'
        clicked :: hide_search_bar()
    Label: lbl2:
        text = 'Replace:'
        align = 'right'
        visible << show_replace
    Field: replace:
        visible << show_replace
        submit_triggers = ['auto_sync', 'return_pressed']
    PushButton: pb5:
        visible << show_replace
        icon = load_icon("control_repeat")
        tool_tip = 'Replace'
        clicked :: replace_text()
    PushButton: pb6:
        visible << show_replace
        icon = load_icon("text_uppercase")
        tool_tip = 'Match case'
        checkable = True
        checked = True
        toggled :: find_text()
    PushButton: pb7:
        visible << show_replace
        icon = load_icon("zoom")
        tool_tip = 'Match regex'
        checkable = True
        toggled :: find_text()
    PushButton: pb8:
        visible << show_replace
        icon = load_icon("page_white_text")
        tool_tip = 'Match words'
        checkable = True
        toggled :: find_text()



enamldef Editor(Scintilla): editor:
    hug_height = 'ignore'
    hug_width = 'ignore'
    syntax << detect_syntax(plugin, doc.name)
    attr doc: Document = Document()
    attr editor_font: str << f"{plugin.font_size}pt {plugin.font_family}"
    attr error_popup = None

    func update_font(theme, font):
        theme['settings']['font'] = font
        return theme
    theme  << update_font(THEMES[plugin.theme] if plugin else THEMES['tango'],
                            editor_font)
    theme :: set_margin_colors()
    settings << {
        "tab_width": 4,
        "use_tabs": False,
        "indent": 4,
        "tab_indents": True,
        "auto_indent": True,
        "backspace_unindents": True,
        "autocompletion_threshold": 1,
        "autocompletion_case_sensitive": True,
        "show_line_numbers": plugin.show_line_numbers,
        "code_folding": plugin.code_folding,
        "show_scrollbars": plugin.show_scrollbars # Not used but here so we update
    }
    autocomplete = 'all'
    settings :: update_settings()
    activated ::
        set_text(doc.source)
        w = self.proxy.widget
        w.indicatorReleased.connect(self.on_indicator_clicked)
        update_settings()

    func update_settings():
        # Reload everything when the settings change
        set_code_folding()
        set_margin_colors()
        set_show_scrollbars()

    func on_indicator_clicked(line, index, keys):
        if error_popup:
            error_popup.hide()
            editor.error_popup = None
            return
        editor.error_popup = ErrorPopup(
            self,
            theme=self.theme,
            message="\n".join(doc.errors[-5:]).strip()
        )
        editor.error_popup.show()

    func set_code_folding():
        w = self.proxy.widget
        style = w.CircledTreeFoldStyle if plugin.code_folding else w.NoFoldStyle
        w.setFolding(style)

    func set_margin_colors():
        w = self.proxy.widget
        bg = get_cached_qcolor(parse_color(theme['settings']['paper']))
        fg = get_cached_qcolor(parse_color(theme['settings']['color']))
        w.setMarginsBackgroundColor(bg)
        w.setFoldMarginColors(bg, bg)
        w.setMarginsForegroundColor(fg)

    func set_show_scrollbars():
        w = self.proxy.widget
        policy = Qt.ScrollBarAsNeeded if plugin.show_scrollbars else Qt.ScrollBarAlwaysOff
        w.setHorizontalScrollBarPolicy(policy)
        w.setVerticalScrollBarPolicy(policy)

    func get_comment_token():
        if not doc.name:
            return ''
        path, ext = os.path.splitext(doc.name.lower())
        if ext in ('.py', '.enaml'):
            return '#'
        elif ext in ('.c', '.cpp', '.js', '.jsx', '.ts', '.ino'):
            return '//'
        return ''

    func comment_lines():
        """ Adds a comment to the given lines """
        token = get_comment_token()
        if not token:
            return
        w = self.proxy.widget
        if w.hasSelectedText():
            # Change selection to use full lines
            start_line, start_col, end_line, end_col = w.getSelection()
            w.setSelection(start_line, 0, end_line, len(w.text(end_line))-1)
            lines = w.selectedText().split("\n")

            # Determine min whitespace of selected lines
            col = min([len(l)-len(l.lstrip()) for l in lines if l.strip()])

            # Insert comment token and ignoring empty lines
            if col == 0:
                lines = [token+l if l.strip() else l for l in lines]
            else:
                lines = [l[0:col]+token+l[col:] if l.strip() else l for l in lines]

            # Replace with commented text
            w.replaceSelectedText("\n".join(lines))

            # Restore selection
            if lines[-1].strip(): # If we modified the last line
                end_col += len(token)
            w.setSelection(start_line, start_col, end_line, end_col)
        else:
            start_line, start_col = w.getCursorPosition()
            text = w.text(start_line)
            col = len(text)-len(text.lstrip())
            if not text.lstrip().startswith(token):
                w.insertAt(token, start_line, col)

            # Restore cursor pos
            if col < start_col:
                start_col += len(token)
            w.setCursorPosition(start_line, start_col)

    func uncomment_lines():
        """ Remove comments from selected or current lines """
        token = get_comment_token()
        if not token:
            return
        w = self.proxy.widget
        if w.hasSelectedText():
            # Change selection to use full lines
            start_line, start_col, end_line, end_col = w.getSelection()
            lines = []
            for line in w.selectedText().split("\n"):
                startswith_comment = line.lstrip().startswith(token)
                if startswith_comment:
                    line = line.replace(token, '', 1)
                lines.append(line)
            w.replaceSelectedText('\n'.join(lines))

            # If the last line was edited decrease end_col
            if startswith_comment:
                end_col -= len(token)

            w.setSelection(start_line, start_col, end_line, end_col)
        else:
            start_line, start_col = w.getCursorPosition()
            text = w.text(start_line)
            if text.lstrip().startswith(token):
                # Select full ine
                w.setSelection(start_line, 0, start_line, len(text)-1)

                # Replace
                w.replaceSelectedText(text.replace(token, '', 1).rstrip("\n"))
                w.setCursorPosition(start_line, start_col)

    func toggle_comments():
        """ Toggle comments """
        token = get_comment_token()
        if not token:
            return
        w = self.proxy.widget
        if w.hasSelectedText():
            start_line, start_col, end_line, end_col = w.getSelection()
        else:
            start_line, start_col = w.getCursorPosition()
        text = w.text(start_line)
        if text.lstrip().startswith(token):
            uncomment_lines()
        else:
            comment_lines()

    func cut():
        self.proxy.widget.cut()

    func copy():
        self.proxy.widget.copy()

    func paste():
        self.proxy.widget.paste()

    func undo():
        self.proxy.widget.undo()

    func redo():
        self.proxy.widget.redo()

    func select_all():
        self.proxy.widget.selectAll(True)

    func deselect():
        self.proxy.widget.selectAll(False)

    text_changed :: timer.start()
    zoom << plugin.zoom if plugin else 0
    indicators << create_indicators(doc.name, doc.errors) if doc else []
    markers << [ScintillaMarker(
                    line=i.start[0],
                    image=load_image("exclamation" if i.color=="#FF0000"
                                        else "error"))
                    for i in indicators]
    #warnings
    Timer: timer:
        interval = 500
        single_shot = True
        timeout ::
            doc.cursor = editor.cursor_position
            doc.source = editor.get_text()
            editor.autocompletions = doc.suggestions



enamldef EditorDockItem(DockItem): view:
    attr doc: Document = Document()
    alias editor
    alias buffer: editor.document
    title << format_title(plugin.documents, doc, doc.name, doc.unsaved)
    closed ::
        core = plugin.workbench.get_plugin("enaml.workbench.core")
        core.invoke_command('declaracad.editor.close_editor',
                            {'document':doc, 'target': view.name})
    icon = load_icon('script_code')
    name = 'editor-item-{}'.format(id(self))
    Container:
        minimum_size = (480, 320)
        padding = 0
        Conditional:
            condition << editor.show_find_bar or editor.show_replace_bar
            EditorFindBar:
                editor << view.editor
                show_replace << editor.show_replace_bar
        Conditional:
            condition << editor.show_goto_bar
            EditorGotoBar:
                editor << view.editor
        Editor: editor:
            attr show_find_bar: bool << False
            attr show_replace_bar: bool << False
            attr show_goto_bar: bool << False
            doc := view.doc
            KeyEvent:
                pressed ::
                    e = change['value']
                    #print(e)
                    k = e['key']
                    if k == plugin.key_mapping.get('find', '\x06'):
                        editor.show_find_bar = not editor.show_find_bar
                    elif k == plugin.key_mapping.get('replace', '\x12'):
                        editor.show_replace_bar = not editor.show_replace_bar
                    elif k == plugin.key_mapping.get('goto', '\x0c'):
                        editor.show_goto_bar = not editor.show_goto_bar

    title_bar_right_clicked :: menu.popup()
    Menu: menu:
        Action:
            text = "Split vertically"
            triggered ::
                core = plugin.workbench.get_plugin("enaml.workbench.core")
                core.invoke_command('declaracad.editor.new_editor',
                                    {'document':doc, 'target': view.name,
                                     'buffer': view.buffer,
                                     'position': 'bottom'})
        Action:
            text = "Split horizontally"
            triggered ::
                core = plugin.workbench.get_plugin("enaml.workbench.core")
                core.invoke_command('declaracad.editor.new_editor',
                                    {'document':doc, 'target': view.name,
                                     'buffer': view.buffer,
                                     'position': 'right'})
        Action:
            separator = True
        Action:
            text = "New viewer"
            triggered ::
                core = plugin.workbench.get_plugin("enaml.workbench.core")
                core.invoke_command('declaracad.viewer.new_viewer',
                                    {'document': doc, 'position': 'right'})
        Action:
            separator = True
        Action:
            text = "Close"
            triggered ::
                core = plugin.workbench.get_plugin("enaml.workbench.core")
                core.invoke_command('declaracad.editor.close_editor',
                                    {'document':doc, 'target': view.name,})
        Action:
            text = "Close all"
            triggered ::
                core = plugin.workbench.get_plugin("enaml.workbench.core")
                deferred_call(core.invoke_command, 'declaracad.editor.close_all_editors')
        Action:
            text = "Close all others"
            triggered ::
                core = plugin.workbench.get_plugin("enaml.workbench.core")
                deferred_call(core.invoke_command, 'declaracad.editor.close_other_editors',
                                    {'editor': view})


enamldef ErrorsDockItem(DockItem):
  title = "Errors"
  name = 'errors-item'
  icon = load_icon('bug')
  Container:
      padding = 0
      MultilineField:
          text << "\n".join(plugin.active_document.errors)


enamldef OutputDockItem(DockItem):
  title = "Output"
  name = 'script-output-item'
  icon = load_icon('script')
  Container:
      padding = 0
      MultilineField:
          text << "\n".join(plugin.active_document.output)


enamldef OutlineDockItem(DockItem): view:
    title = "Outline"
    name = 'code-outline-item'
    icon = load_icon('chart_organisation')
    func create_outline(source):
        doc = plugin.active_document

        try:
            ast = parse(source)
        except Exception as e:
            # We could set errors here?
            return [e]

        nodes = []
        # Walk ast and pull out nodes we're insterested in
        for node in ast.body:
            if isinstance(node, enaml_ast.EnamlDef):
                nodes.append(node)
            elif isinstance(node, enaml_ast.PythonModule):
                for n in node.ast.body:
                    if isinstance(n, (python_ast.ClassDef,
                                      python_ast.FunctionDef)):
                        nodes.append(n)
        # Hack to workaround a segfault when the tree's items are emptied
        if not nodes:
            nodes.append(ast)
        return nodes

    func format_node(node):
        if isinstance(node, python_ast.FunctionDef):
            return "tag", "def", node.name, "Function"
        elif isinstance(node, python_ast.ClassDef):
            return "brick", "class", node.name, ""
        elif isinstance(node, enaml_ast.EnamlDef):
            return "bricks", "enamldef", node.typename, node.base
        elif isinstance(node, Exception):
            return "exclamation", "error", str(node), str(node.__class__.__name__)
        return "tag_blue", "", str(node), ""

    Container:
        padding = 0
        TreeView: tree:
            horizontal_headers = ['Name', 'Type', "Line"]
            horizontal_stretch = True
            resize_mode = 'resize_to_contents'
            items << create_outline(plugin.active_document.source)
            Looper:
                iterable << tree.items
                TreeViewItem:
                    attr obj << format_node(loop_item)
                    icon << load_icon(obj[0])
                    text << obj[2]
                    double_clicked ::
                        editor = plugin.get_editor()
                        # Go to the line
                        widget = editor.proxy.widget
                        widget.setCursorPosition(max(0,loop_item.lineno-2), 0)
                        widget.ensureCursorVisible()
                        # Retract the item if shown
                        dock_area = view.parent
                        dock_area.update_layout(RetractItem(item=view.name))

                    TreeViewColumn:
                        text << obj[3]
                    TreeViewColumn:
                        text << str(loop_item.lineno)




