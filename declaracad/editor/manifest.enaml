"""
Copyright (c) 2017, Jairus Martin.

Distributed under the terms of the GPL v3 License.

The full license is in the file LICENSE, distributed with this software.

Created on Dec 6, 2017

@author: jrm
"""
import os
import enaml
from glob import glob
from collections import OrderedDict
from enaml.widgets.api import FileDialogEx
from enaml.core.api import Looper, Conditional
from enaml.layout.api import InsertItem, RemoveItem
from enaml.workbench.api import Extension, PluginManifest
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import ActionItem, MenuItem, ItemGroup, Autostart
from declaracad.ui.extensions import (
    DOCK_ITEM_POINT, DockItem, SETTINGS_PAGE_POINT, SettingsPage
)


def plugin_command(name, event):
    editor = event.workbench.get_plugin('declaracad.editor')
    handler = getattr(editor, name)
    handler(event)


def open_file(event):
    ui = event.workbench.get_plugin('enaml.workbench.ui')
    plugin = event.workbench.get_plugin('declaracad.editor')
    path = event.parameters.get('path', '')
    if not path:
        path = FileDialogEx.get_open_file_name(
            ui.window,
            current_path=plugin.last_path)
        plugin.last_path = os.path.dirname(path)
    if path:
        event.parameters['path'] = path
        plugin.open_file(event)

def new_file(event):
    ui = event.workbench.get_plugin('enaml.workbench.ui')
    plugin = event.workbench.get_plugin('declaracad.editor')
    with enaml.imports():
        from declaracad.editor.dialogs import NewFileDialog

    NewFileDialog(ui.window, plugin=plugin, event=event).exec_()


def reload_document(event):
    plugin = event.workbench.get_plugin('declaracad.editor')
    plugin.reload_document(**event.parameters)


def save_file(event):
    ui = event.workbench.get_plugin('enaml.workbench.ui')
    plugin = event.workbench.get_plugin('declaracad.editor')
    if plugin.active_document.name:
        return plugin.save_file(event)
    else:
        return save_file_as(event)


def save_file_as(event):
    ui = event.workbench.get_plugin('enaml.workbench.ui')
    plugin = event.workbench.get_plugin('declaracad.editor')
    path = FileDialogEx.get_save_file_name(
        ui.window, current_path=os.path.dirname(plugin.active_document.name))
    if path:
        event.parameters['path'] = path
        plugin.save_file_as(event)


def new_editor(event):
    plugin = event.workbench.get_plugin('declaracad.editor')
    dock = plugin.get_dock_area()
    position = event.parameters.get('position', 'right')
    target = event.parameters.get('target')
    buffer = event.parameters.get('buffer')
    doc = event.parameters.get('document') or event.parameters.get('doc')
    if doc is not None:
        with enaml.imports():
            from declaracad.editor.view import EditorDockItem
        kwargs = {'plugin': plugin, 'doc': doc}
        if buffer is not None:
            kwargs['buffer'] = buffer
        item = EditorDockItem(dock, **kwargs)
        dock.update_layout(InsertItem(item=item.name, position=position,
                                      target=target))

def close_editor(event):
    plugin = event.workbench.get_plugin('declaracad.editor')
    dock = plugin.get_dock_area()
    target = event.parameters.get('target')
    doc = event.parameters.get('document') or event.parameters.get('doc')

    # Remove it
    dock.update_layout(RemoveItem(item=target))

    if doc is not None:
        # If no more editors are open for this document, close the file
        items = [i for i in plugin.get_editor_items()
                 if i.doc == doc and i.name != target]
        if not items:
            plugin.close_file(doc.name)


def close_all_editors(event):
    plugin = event.workbench.get_plugin('declaracad.editor')
    dock = plugin.get_dock_area()
    ops = [RemoveItem(item=item.name) for item in plugin.get_editor_items()]
    dock.update_layout(ops)
    plugin.documents = []


def close_other_editors(event):
    # Close all other editors except the 'editor' parameter given
    plugin = event.workbench.get_plugin('declaracad.editor')
    dock = plugin.get_dock_area()
    editor = event.parameters.get('editor')
    ops = [RemoveItem(item=item.name) for item in plugin.get_editor_items()
           if item.name != editor.name]
    dock.update_layout(ops)
    plugin.documents = [editor.doc]


def find_in_editor(event):
    plugin = event.workbench.get_plugin('declaracad.editor')
    editor = plugin.get_editor()
    editor.show_find_bar = True


def replace_in_editor(event):
    plugin = event.workbench.get_plugin('declaracad.editor')
    editor = plugin.get_editor()
    editor.show_replace_bar = True


def goto_in_editor(event):
    plugin = event.workbench.get_plugin('declaracad.editor')
    editor = plugin.get_editor()
    editor.show_goto_bar = True


def editor_action(event, action):
    plugin = event.workbench.get_plugin('declaracad.editor')
    editor = plugin.get_editor()
    getattr(editor, action)()


def plugin_factory():
    from .plugin import EditorPlugin
    return EditorPlugin()


def get_examples():
    """ Get all examples matching examples/*/*.py """
    examples = OrderedDict()
    py_files = [f.replace("\\","/").split("/")[1:] for
                  f in glob('examples/**/*.enaml', recursive=True)]
    for path in sorted(py_files):
        folders = path[:-1]
        folder = ''
        if len(path)>1:
            #: Need to add all folders one at a time to make sure
            #: menu items for each are created exactly once
            #: Ex. examples/pyb/01-Bla will create the keys in order
            #: ['examples','examples/pyb','examples/pyb/01-Bla']
            for i in range(len(folders)):
                subfolder = folders[i]
                if folder:
                    folder = "{}/{}".format(folder,subfolder)
                else:
                    folder = subfolder
                if folder not in examples:
                    examples[folder] = []
        else:
             if folder not in examples:
                examples[folder] = []

        examples[folder].append("/".join(path))
    return examples


def plugin_factory():
    from .plugin import EditorPlugin
    return EditorPlugin()


def item_factory():
    with enaml.imports():
        from .view import EditorDockItem
    return EditorDockItem


def settings_page_factory():
    with enaml.imports():
        from .settings import EditorSettingsPage
    return EditorSettingsPage


def errors_item_factory():
  with enaml.imports():
    from .view import ErrorsDockItem
  return ErrorsDockItem


def output_item_factory():
  with enaml.imports():
    from .view import OutputDockItem
  return OutputDockItem


def outline_item_factory():
  with enaml.imports():
    from .view import OutlineDockItem
  return OutlineDockItem


EDITOR_ACTIONS = [
    'declaracad.editor.{}'.format(action) for action in (
        'comment_lines', 'uncomment_lines', 'toggle_comments',
        'undo', 'redo', 'cut', 'copy', 'paste', 'select_all', 'deselect',
    )
]


enamldef EditorManifest(PluginManifest):
    """ The manifest which is registered when the view is loaded.

    This manifest contributes extra menu items to the menu bar.

    """
    id = 'declaracad.editor'
    factory = plugin_factory
    Extension:
        id = 'items'
        point = DOCK_ITEM_POINT
        #: Make sure this comes after the viewer
        rank = 100
        DockItem:
            plugin_id = 'declaracad.editor'
            factory = item_factory
            layout = 'main'
        DockItem:
            plugin_id = 'declaracad.editor'
            factory = errors_item_factory
            layout = 'left'
        DockItem:
            plugin_id = 'declaracad.editor'
            factory = output_item_factory
            layout = 'bottom'
        DockItem:
            plugin_id = 'declaracad.editor'
            factory = outline_item_factory
            layout = 'left'
    Extension:
        id = 'settings'
        point = SETTINGS_PAGE_POINT
        SettingsPage:
            name = "Editor"
            plugin_id = 'declaracad.editor'
            factory = settings_page_factory
    Extension:
        id = 'autostart'
        point = 'enaml.workbench.ui.autostart'
        rank = 100
        Autostart:
            plugin_id = 'declaracad.editor'
    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'declaracad.editor.close_file'
            handler = lambda event:plugin_command('close_file', event)
        Command:
            id = 'declaracad.editor.save_file'
            handler = save_file
        Command:
            id = 'declaracad.editor.save_file_as'
            handler = save_file_as
        Command:
            id = 'declaracad.editor.new_file'
            handler = new_file
        Command:
            id = 'declaracad.editor.open_file'
            handler = open_file
        Command:
            id = 'declaracad.editor.reload_document'
            handler = reload_document
        Command:
            id = 'declaracad.editor.new_editor'
            handler = new_editor
        Command:
            id = 'declaracad.editor.close_editor'
            handler = close_editor
        Command:
            id = 'declaracad.editor.close_all_editors'
            handler = close_all_editors
        Command:
            id = 'declaracad.editor.close_other_editors'
            handler = close_other_editors
        Command:
            id = 'declaracad.editor.find'
            handler = find_in_editor
        Command:
            id = 'declaracad.editor.replace'
            handler = replace_in_editor
        Command:
            id = 'declaracad.editor.goto_line'
            handler = goto_in_editor
        Looper:
            iterable << EDITOR_ACTIONS
            Command:
                id = loop_item
                handler = lambda e, a=loop_item.split('.')[-1]: editor_action(e, a)

    Extension:
        id = 'actions'
        point = 'enaml.workbench.ui.actions'
        ActionItem:
            path = '/file/new'
            label = 'New'
            shortcut = 'Ctrl+N'
            group = 'user'
            command = 'declaracad.editor.new_file'
        ActionItem:
            path = '/file/open'
            label = 'Open'
            shortcut = 'Ctrl+O'
            group = 'user'
            command = 'declaracad.editor.open_file'
        ActionItem:
            path = '/file/close'
            label = 'Close'
            shortcut = 'Ctrl+W'
            group = 'document'
            command = 'declaracad.editor.close_file'
        ActionItem:
            path = '/file/save'
            enabled << bool(workbench and workbench.get_plugin("declaracad.editor").active_document)
            label = 'Save'
            shortcut = 'Ctrl+S'
            group = 'document'
            command = 'declaracad.editor.save_file'
        ActionItem:
            path = '/file/save_as'
            enabled << bool(workbench and workbench.get_plugin("declaracad.editor").active_document)
            label = 'Save As'
            shortcut = 'Ctrl+Shift+S'
            group = 'document'
            command = 'declaracad.editor.save_file_as'
        #MenuItem:
            #path = '/examples'
            #label = 'Examples'
            #after = 'file'
            #before = 'settings'
            #ItemGroup:
                #id = 'examples'
        MenuItem:
            path = '/edit'
            label = 'Edit'
            after = 'file'
            before = 'view'
            ItemGroup:
                id = 'history'
            ItemGroup:
                id = 'clipboard'
            ItemGroup:
                id = 'selection'
            ItemGroup:
                id = 'find'
            ItemGroup:
                id = 'comments'
        ActionItem:
            path = '/edit/undo'
            label = 'Undo'
            shortcut = 'Ctrl+Z'
            group = 'history'
            command = 'declaracad.editor.undo'
        ActionItem:
            path = '/edit/redo'
            label = 'Redo'
            shortcut = 'Ctrl+Shift+Z'
            group = 'history'
            command = 'declaracad.editor.redo'
        ActionItem:
            path = '/edit/cut'
            label = 'Cut'
            shortcut = 'Ctrl+X'
            group = 'clipboard'
            command = 'declaracad.editor.cut'
        ActionItem:
            path = '/edit/copy'
            label = 'Copy'
            shortcut = 'Ctrl+C'
            group = 'clipboard'
            command = 'declaracad.editor.copy'
        ActionItem:
            path = '/edit/paste'
            label = 'Paste'
            shortcut = 'Ctrl+V'
            group = 'clipboard'
            command = 'declaracad.editor.paste'
        ActionItem:
            path = '/edit/select_all'
            label = 'Select all'
            shortcut = 'Ctrl+A'
            group = 'selection'
            command = 'declaracad.editor.select_all'
        ActionItem:
            path = '/edit/deselect'
            label = 'Deselect'
            shortcut = 'Ctrl+Shift+A'
            group = 'selection'
            command = 'declaracad.editor.deselect'
        ActionItem:
            path = '/edit/find'
            label = 'Find'
            shortcut = 'Ctrl+F'
            group = 'find'
            command = 'declaracad.editor.find'
        ActionItem:
            path = '/edit/replace'
            label = 'Replace'
            shortcut = 'Ctrl+R'
            group = 'find'
            command = 'declaracad.editor.replace'
        ActionItem:
            path = '/edit/goto'
            label = 'Go to line'
            shortcut = 'Ctrl+L'
            group = 'find'
            command = 'declaracad.editor.goto_line'
        ActionItem:
            path = '/edit/comment'
            label = 'Comment'
            group = 'comments'
            command = 'declaracad.editor.comment_lines'
        ActionItem:
            path = '/edit/uncomment'
            label = 'Uncomment'
            group = 'comments'
            command = 'declaracad.editor.uncomment_lines'
        ActionItem:
            path = '/edit/toggle_comments'
            label = 'Toggle comments'
            shortcut = 'Ctrl+/'
            group = 'comments'
            command = 'declaracad.editor.toggle_comments'
        #Looper:
            #iterable = get_examples().items()
            #Conditional:
                #condition << bool(loop_item[0])
                #MenuItem:
                    #path = '/examples/{}'.format(loop_item[0].replace(" ",'-'))
                    #label = loop_item[0].split("/")[-1]
                    #group = 'examples' if len(loop_item[0].split("/")) == 0 else ""
            #Looper:
                #iterable = loop_item[1]
                #ActionItem:
                    #attr filename = loop_item.split("/")[-1]
                    #path = '/examples/{}'.format(loop_item.replace(" ",'-'))
                    #label = filename
                    #command = 'declaracad.editor.open_file'
                    #parameters = {'path': 'examples/{}'.format(loop_item), 'name': 'main.py'}
            # MenuItem:
            #     path = '/tools'
            #     label = 'Tools'
            #     before = 'workspace'

