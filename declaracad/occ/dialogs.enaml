"""
Copyright (c) 2017-2018, Jairus Martin.

Distributed under the terms of the GPL v3 License.

The full license is in the file LICENSE, distributed with this software.

Created on Dec 13, 2017

@author: jrm
"""
import os
import sys
import textwrap
if sys.platform == 'win32':
    from enaml import winutil
from enaml.image import Image
from enaml.layout.api import align, hbox, spacer
from enaml.core.api import Conditional, Looper
from enaml.stdlib.dialog_buttons import DialogButtonBox, DialogButton
from enaml.stdlib.task_dialog import (
    TaskDialogBody, TaskDialogCommandArea,
    TaskDialogContentArea, TaskDialogDetailsArea, TaskDialogFootnoteArea,
    TaskDialogIconArea, TaskDialogInstructionArea, TaskDialogStyleSheet
)
from enaml.stdlib.mapped_view import MappedView
from enaml.widgets.api import (
    Dialog, Field, Label, PushButton, RadioButton, CheckBox, Html,
    ProgressBar, ObjectCombo, Form, Container, SpinBox, FileDialogEx,
    MultilineField, ImageView
)
from enamlx.widgets.api import DoubleSpinBox
from .plugin import ScreenshotOptions, ModelExporter, log


enamldef ExportOptionsForm(Form):
    attr model: ModelExporter


enamldef ExportDialog(Dialog): dialog:
    title = 'Export model'
    initial_size = (640, 320)
    attr plugin
    attr event
    attr protocol = None
    attr show_advanced: bool = False
    attr options: ModelExporter = create_default_options()
    func create_default_options():
        editor = plugin.workbench.get_plugin('declaracad.editor')
        doc = editor.active_document
        Exporter = export_type.selected
        return Exporter(filename=doc.name)

    #TaskDialogStyleSheet:
    #        pass
    TaskDialogBody:
        TaskDialogInstructionArea:
            Label:
                style_class = 'task-dialog-instructions'
                text = 'Export model'
        TaskDialogContentArea:
            Label:
                style_class = 'task-dialog-content'
                text = 'Enter the new file name'
            Form:
                Label:
                    text = "Type"
                ObjectCombo: export_type:
                    items = list(plugin.exporters)
                    to_string = lambda e: e.extension
                    selected :: dialog.options = create_default_options()
                Label:
                    text = "Name"
                Container:
                    constraints = [
                        hbox(file_name, browse)
                    ]
                    padding = 0
                    Field: file_name:
                        submit_triggers = ['auto_sync']
                        text << os.path.abspath(options.path)
                        text ::
                            path = change['value']
                            ext = f'.{options.extension}'
                            if not path.endswith(ext):
                                path += ext
                            options.path = path
                    PushButton: browse:
                        text = "Browse"
                        clicked ::
                            path = FileDialogEx.get_save_file_name(self,
                                        current_path=options.path,
                                        name_filters=[f'*.{options.extension}'])
                            if path:
                                ext = f'.{options.extension}'
                                if not path.endswith(ext):
                                    path += ext
                                options.path = path
        TaskDialogDetailsArea: details:
            visible << dialog.show_advanced or dialog.protocol is not None
            Conditional:
                condition << dialog.show_advanced
                MappedView:
                    model << dialog.options
                    typemap << {e: e.get_options_view()
                                for e in plugin.exporters}
            Conditional:
                condition << dialog.protocol is not None
                MultilineField:
                    text << b'\n'.join(dialog.protocol.output)
        TaskDialogCommandArea:
            constraints = [
                hbox(show_options, spacer, btn_yes, btn_no),
                align('v_center', btn_yes, btn_no),
            ]
            CheckBox: show_options:
                text = "Show advanced"
                checked := dialog.show_advanced
            PushButton: btn_no:
                text << "Close" if dialog.protocol else "Cancel"
                clicked ::
                    dialog.close()
                    if dialog.protocol:
                        dialog.protocol.terminate()
            PushButton: btn_yes:
                enabled << bool(options.path)
                text = "Export"
                clicked ::
                    event.parameters['options'] = options
                    dialog.protocol = plugin.export(event)


enamldef ScreenCaptureDialog(Dialog): dialog:
    title = 'Screen Capture'
    initial_size = (640, 320)
    attr plugin
    attr event
    attr show_preview: bool = False
    attr results: list = []
    attr options: ScreenshotOptions = create_default_options()

    func create_default_options():
        editor = plugin.workbench.get_plugin('declaracad.editor')
        doc = editor.active_document
        return ScreenshotOptions(filename=doc.name,
                                 default_dir=plugin.screenshot_dir,
                                 target=event.parameters.get('target', ''))

    TaskDialogStyleSheet:
            pass
    TaskDialogBody:
        TaskDialogInstructionArea:
            Label:
                style_class = 'task-dialog-instructions'
                text = 'Export screenshots of model'
        TaskDialogContentArea:
            Label:
                style_class = 'task-dialog-content'
                text = 'Enter the new file name'
            Form:
                Label:
                    text = "Name"
                Container:
                    constraints = [
                        hbox(file_name, browse)
                    ]
                    padding = 0
                    Field: file_name:
                        submit_triggers = ['auto_sync']
                        text << os.path.abspath(options.path)
                        text ::
                            path = change['value']
                            if path:
                                p, ext = os.path.splitext(path.lower())
                                if ext in ('.png', '.jpeg', '.tiff', '.bmp'):
                                    options.path = path
                    PushButton: browse:
                        text = "Browse"
                        clicked ::
                            path = FileDialogEx.get_save_file_name(self,
                                        current_path=options.path,
                                        name_filters=['*.png',
                                                      '*.jpeg',
                                                      '*.tiff',
                                                      '*.bmp'])
                            if path:
                                options.path = path
        TaskDialogDetailsArea: details:
            visible << dialog.show_preview
            Form:
                func load_image(result):
                    if result is not None:
                        with open(result, 'rb') as f:
                            return Image(data=f.read())
                    else:
                        return None
                func image_ready(result):
                    try:
                        return os.path.exists(result)
                    except:
                        return False

                Looper:
                    iterable << results
                    Conditional: cond:
                        condition << image_ready(loop_item.result)
                        ImageView:
                            resist_width = 'weak'
                            resist_height = 'weak'
                            scale_to_fit = True
                            allow_upscaling = False
                            preserve_aspect_ratio = True
                            constraints = [(width == 640) | 'weak', (height == 480) | 'weak']
                            image << load_image(loop_item.result)
                    Conditional:
                        condition << not cond.condition
                        MultilineField:
                            text << str(loop_item.result) if loop_item.result else "Loading..."

        TaskDialogCommandArea:
            constraints = [
                hbox(show_options, spacer, btn_yes, btn_no),
                align('v_center', btn_yes, btn_no),
            ]
            CheckBox: show_options:
                text = "Show preview"
                checked := dialog.show_preview
            PushButton: btn_no:
                text << "Close" if results else "Cancel"
                clicked :: dialog.close()
            PushButton: btn_yes:
                enabled << bool(options.path)
                text = "Export"
                clicked ::
                    event.parameters['options'] = options
                    dialog.results = plugin.screenshot(event)
                    dialog.show_preview = True

