"""
Copyright (c) 2020, Jairus Martin.

Distributed under the terms of the GPL v3 License.

The full license is in the file LICENSE, distributed with this software.

Created on March 25, 2020

@author: jrm
"""
from atom.api import Bool, Coerced, Float, List, Typed, ForwardTyped, observe
from enaml.colors import ColorMember, Color
from enaml.core.declarative import d_
from enaml.widgets.control import ProxyControl
from enaml.widgets.toolkit_object import ToolkitObject

from .shape import Point, coerce_point


class ProxyDimension(ProxyControl):
    #: A reference to the Shape declaration.
    declaration = ForwardTyped(lambda: Dimension)

    def set_shapes(self, shapes):
        raise NotImplementedError

    def set_display(self, display):
        raise NotImplementedError

    def set_color(self, color):
        raise NotImplementedError

    def set_direction(self, direction):
        raise NotImplementedError

    def set_flyout(self, flyout):
        raise NotImplementedError

    def set_extension_size(self, size):
        raise NotImplementedError

    def set_arrow_tail_size(self, size):
        raise NotImplementedError


class ProxyAngleDimension(ProxyControl):
    #: A reference to the Shape declaration.
    declaration = ForwardTyped(lambda: AngleDimension)


class ProxyLengthDimension(ProxyControl):
    #: A reference to the Shape declaration.
    declaration = ForwardTyped(lambda: LengthDimension)


class ProxyDiameterDimension(ProxyControl):
    #: A reference to the Shape declaration.
    declaration = ForwardTyped(lambda: DiameterDimension)


class ProxyRadiusDimension(ProxyControl):
    #: A reference to the Shape declaration.
    declaration = ForwardTyped(lambda: RadiusDimension)


class Dimension(ToolkitObject):
    """ Basic dimension

    """
    #: Reference to the implementation control
    proxy = Typed(ProxyDimension)

    #: Whether the dimension should be displayed
    display = d_(Bool(True))

    #: A string representing the color of the shape.
    color = d_(ColorMember()).tag(view=True, group='Display')

    def _default_color(self):
        return Color(0, 0, 0)

    #: A tuple or list of the (x, y, z) direction of this shape. This is
    #: coerced into a Point. The direction is relative to the dimensions axis.
    direction = d_(Coerced(Point, coercer=coerce_point))

    def _default_direction(self):
        return Point(10, 10, 10)

    #: Set the flyout distance.
    flyout = d_(Float(0.0, strict=False))

    #: Set the extension length (distance from arrow to text).
    extension_size = d_(Float(0.0, strict=False))

    #: Set the arrow tail length.
    arrow_tail_size = d_(Float(0.0, strict=False))

    #: List of shapes to create the dimension
    shapes = d_(List())

    @observe('display', 'shapes', 'color', 'direction', 'flyout',
             'extension_size', 'arrow_tail_size')
    def _update_proxy(self, change):
        super(Dimension, self)._update_proxy(change)

    def show(self):
        """ Generates the dimension

        Returns
        -------
        dimension: AIS_Dimension
            The dimension generated by this declaration.

        """
        if not self.is_initialized:
            self.initialize()
        if not self.proxy_is_active:
            self.activate_proxy()
        return self.proxy.dimension


class AngleDimension(Dimension):
    #: Reference to the implementation control
    proxy = Typed(ProxyAngleDimension)


class LengthDimension(Dimension):
    """ A LengthDimension can be created from the following shapes

    - An edge
    - Two verticies
    - Parallel edges
    - Parallel faces

    """
    #: Reference to the implementation control
    proxy = Typed(ProxyLengthDimension)


class RadiusDimension(Dimension):
    #: Reference to the implementation control
    proxy = Typed(ProxyRadiusDimension)


class DiameterDimension(Dimension):
    #: Reference to the implementation control
    proxy = Typed(ProxyDiameterDimension)
