"""
Copyright (c) 2017, Jairus Martin.

Distributed under the terms of the GPL v3 License.

The full license is in the file LICENSE, distributed with this software.

Created on Dec 6, 2017

@author: jrm
"""
import enaml
from enaml.workbench.api import Extension, PluginManifest
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import ActionItem
from enaml.layout.api import InsertItem
from enaml.widgets.api import FileDialogEx
from declaracad.ui.extensions import (
    DOCK_ITEM_POINT, DockItem, SETTINGS_PAGE_POINT, SettingsPage
)


def plugin_command(name, event):
    plugin = event.workbench.get_plugin('declaracad.viewer')
    handler = getattr(plugin, name)
    handler(event)


def export(event):
    ui = event.workbench.get_plugin('enaml.workbench.ui')
    plugin = event.workbench.get_plugin('declaracad.viewer')
    with enaml.imports():
        from .dialogs import ExportDialog
    ExportDialog(ui.window, plugin=plugin, event=event).exec_()


def screenshot(event):
    ui = event.workbench.get_plugin('enaml.workbench.ui')
    plugin = event.workbench.get_plugin('declaracad.viewer')
    with enaml.imports():
        from .dialogs import ScreenCaptureDialog
    ScreenCaptureDialog(ui.window, plugin=plugin, event=event).exec_()


def new_viewer(event):
    editor_plugin = event.workbench.get_plugin('declaracad.editor')
    viewer_plugin = event.workbench.get_plugin('declaracad.viewer')
    dock = editor_plugin.get_dock_area()
    position = event.parameters.get('position', 'right')
    target = event.parameters.get('target', '')
    with enaml.imports():
        from declaracad.occ.view import ViewerDockItem
    doc = event.parameters.get('document') or editor_plugin.active_document
    item = ViewerDockItem(dock, plugin=viewer_plugin, document=doc)
    item.renderer.document = doc
    dock.update_layout(InsertItem(item=item.name, position=position,
                                  target=target))

def plugin_factory():
    from .plugin import ViewerPlugin
    return ViewerPlugin()


def item_factory():
    with enaml.imports():
        from .view import ViewerDockItem
    return ViewerDockItem


def settngs_page_factory():
    with enaml.imports():
        from .settings import ViewerSettingsPage
    return ViewerSettingsPage


enamldef ViewerManifest(PluginManifest):
    """ The manifest which is registered when the view is loaded.

    This manifest contributes extra menu items to the menu bar.

    """
    id = 'declaracad.viewer'
    factory = plugin_factory

    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'declaracad.viewer.fit_all'
            handler = lambda event:plugin_command('fit_all', event)
        Command:
            id = 'declaracad.viewer.run'
            handler = lambda event:plugin_command('run', event)
        Command:
            id = 'declaracad.viewer.export'
            handler = export
        Command:
            id = 'declaracad.viewer.new_viewer'
            handler = new_viewer
        Command:
            id = 'declaracad.viewer.screenshot'
            handler = screenshot
    Extension:
        id = 'items'
        point = DOCK_ITEM_POINT
        DockItem:
            plugin_id = 'declaracad.viewer'
            factory = item_factory
            layout = 'main'
    Extension:
        id = 'settings'
        point = SETTINGS_PAGE_POINT
        SettingsPage:
            name = "Viewer"
            plugin_id = 'declaracad.viewer'
            factory = settngs_page_factory

    Extension:
        id = 'menu'
        point = 'enaml.workbench.ui.actions'
        ActionItem:
            path = '/file/run'
            label = 'Run'
            shortcut = 'F2'
            group = 'impexp'
            command = 'declaracad.viewer.run'
        ActionItem:
            path = '/file/export'
            label = 'Export model...'
            group = 'impexp'
            command = 'declaracad.viewer.export'
        ActionItem:
            path = '/file/screenshot'
            label = 'Export screenshot...'
            group = 'impexp'
            command = 'declaracad.viewer.screenshot'
        ActionItem:
            path = '/view/viewer'
            label = 'New viewer'
            command = 'declaracad.viewer.new_viewer'

