"""
Copyright (c) 2017, Jairus Martin.

Distributed under the terms of the GPL v3 License.

The full license is in the file LICENSE, distributed with this software.

Created on Dec 12, 2017

@author: jrm
"""
import re
import sys
if sys.platform == 'win32':
    from enaml import winutil
from enaml.core.api import Looper
from enaml.layout.api import align, hbox, spacer
from enaml.core.api import Conditional
from enaml.stdlib.mapped_view import MappedView
from enaml.stdlib.dialog_buttons import DialogButtonBox, DialogButton
from enaml.stdlib.task_dialog import (
    TaskDialogBody, TaskDialogCommandArea,
    TaskDialogContentArea, TaskDialogDetailsArea, TaskDialogFootnoteArea,
    TaskDialogIconArea, TaskDialogInstructionArea, TaskDialogStyleSheet
)
from enaml.widgets.api import (
    Dialog, Field, Label, PushButton, Form, ObjectCombo, SplitItem, Splitter,
    Container, SpinBox, FileDialogEx, ObjectCombo, ColorDialog, CheckBox
)
from enamlx.widgets.api import DoubleSpinBox
from .widgets.api import OccViewer


def format_color(color):
    if not color:
        return "Not set"
    return str(hex(color.argb)).replace('0x','#').upper()


enamldef ViewerGridSettingsPage(Container):
    attr model

    Form:
        Label:
            text = "Grid Mode"
        ObjectCombo:
            items = list(OccViewer.grid_mode.items)
            to_string = lambda it: it.title().replace("-", " ")
            selected := model.grid_mode
        Label:
            text = "Grid Color"
        PushButton:
            text << format_color(model.grid_major_color)
            clicked ::
                dlg = ColorDialog(parent=self, current_color=model.grid_major_color)
                if dlg.exec_():
                    model.grid_major_color = dlg.selected_color
        Label:
            text = "Grid Tenth Color"
        PushButton:
            text << format_color(model.grid_minor_color)
            clicked ::
                dlg = ColorDialog(parent=self, current_color=model.grid_minor_color)
                if dlg.exec_():
                    model.grid_minor_color = dlg.selected_color


enamldef ViewerSettingsPage(Container):
    attr model

    Form:
        Label:
            text = "Viewer Background"
        ObjectCombo:
            items = list(model.get_member('background_mode').items)
            to_string = lambda it: it.title()
            selected := model.background_mode
        Label:
            text = "Color"
        PushButton:
            text << format_color(model.background_top)
            clicked ::
                dlg = ColorDialog(parent=self, current_color=model.background_top)
                if dlg.exec_():
                    model.background_top = dlg.selected_color
        Conditional:
            condition << model.background_mode == 'gradient'
            Label:
                text = "Second Color"
            PushButton:
                text << format_color(model.background_bottom)
                clicked ::
                    dlg = ColorDialog(parent=self, current_color=model.background_top)
                    if dlg.exec_():
                        model.background_bottom = dlg.selected_color
            Label:
                text = "Fill method"
            ObjectCombo:
                items = list(model.get_member('background_fill_method').items)
                to_string = lambda it: it.replace("-", " ").title()
                selected := model.background_fill_method

        Label:
            text = "Trihedron display"
        ObjectCombo:
            items = list(OccViewer.trihedron_mode.items)
            to_string = lambda it: it.replace("-", " ").title()
            selected := model.trihedron_mode

        Label:
            text = "Default shape color"
        PushButton:
            text << format_color(model.shape_color)
            clicked ::
                dlg = ColorDialog(parent=self, current_color=model.shape_color)
                if dlg.exec_():
                    model.shape_color = dlg.selected_color
        Label:
            text = "Render shadows"
        CheckBox:
            checked := model.shadows
        Label:
            text = "Render reflections"
        CheckBox:
            checked := model.reflections
        Label:
            text = "Render boundaries"
        CheckBox:
            checked := model.draw_boundaries
        Label:
            text = "Enable antialiasing"
        CheckBox:
            checked := model.antialiasing
        Label:
            text = "Enable raytracing"
        CheckBox:
            checked := model.raytracing
        Label:
            text = "Chordial Deviation"
        DoubleSpinBox:
            decimals = 6
            single_step = 0.01
            value := model.chordial_deviation


