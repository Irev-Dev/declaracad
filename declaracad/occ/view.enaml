"""
Copyright (c) 2016-2018, Jairus Martin.

Distributed under the terms of the GPL v3 License.

The full license is in the file LICENSE, distributed with this software.

Created on Sep 28, 2016

@author: jrm
"""
import os
import math
import traceback
from atom.api import Atom


from declaracad.core.api import DockItem, EmbeddedWindow
from declaracad.core.utils import log, load_icon, capture_output, format_title

import enaml
from enaml.core.api import Looper, Include, Conditional
from enaml.application import timed_call, deferred_call
from enaml.layout.api import align, hbox
from enaml.qt.QtCore import Qt
from enaml.widgets.api import (
    Window, Container, Menu, Action, DualSlider, CheckBox, Label,
    IPythonConsole, ProgressBar, ScrollArea
)

from .widgets.api import OccViewer, OccViewerClippedPlane
from .dimension import (
    AngleDimension, LengthDimension, RadiusDimension, DiameterDimension
)
from .plugin import ViewerPlugin, ViewerProcess, load_model, EmptyFileError


def expand_dict(p):
    for k, v in p.items():
        for p in v:
            yield p


enamldef ModelViewer(OccViewer): viewer:
    attr p0 = None
    attr clipped_planes: dict = {} # Map axis to tuple of (lower, upper)
    attr dimensions: list = []
    attr show_console: bool = False
    attr shapes: list = []

    # Last key event
    attr keymap = {
        'd': menu_dimensions.keymap,
        'v': menu_view_direction.keymap,
        's': menu_selection_mode.keymap,
        'l': {
            'x': lambda: viewer.rotate_view(x=math.radians(-90)),
            'y': lambda: viewer.rotate_view(y=math.radians(-90)),
            'z': lambda: viewer.rotate_view(z=math.radians(-90)),
        },
        'r': {
            'x': lambda: viewer.rotate_view(x=math.radians(90)),
            'y': lambda: viewer.rotate_view(y=math.radians(90)),
            'z': lambda: viewer.rotate_view(z=math.radians(90)),
        },
    }
    attr last_key: str = ""
    attr keypress_timeout: int = 2000

    func get_selected_shapes():
        """ Get all selected shapes

        """
        shapes = []
        if self.selection:
            for s in self.selection.selection.values():
                for mapping in s.values():
                    shapes.extend(mapping.values())
        return shapes

    Include:
        objects << list(expand_dict(clipped_planes))
    Conditional:
        condition << show_console
        IPythonConsole:
            initial_ns = {'viewer': viewer}
            minimum_size = (640, 240)
    Include:
        objects << viewer.shapes
    Include:
        objects << viewer.dimensions
#     on_mouse_press::
#         display, event = change['value']
#         #print 'mouse_press',event
#         pt = event.pos()
#         if event.button() == Qt.LeftButton:
#             display.Select(pt.x(), pt.y())
#         #viewer.p0 = display.View.Convert(pt.x(),pt.y())
#             #raise StopIteration
#    on_mouse_move::
#        display, event = change['value']
#        pt = event.pos()
#        display.MoveTo(pt.x(),pt.y())
#
#        #: Drag selected object
#        if event.buttons() == Qt.LeftButton:
#            p0 = viewer.p0
#            p1 =  display.View.Convert(pt.x(),pt.y())
#            viewer.p0 = p1
#            if viewer.selection and p0:
#                dx,dy,dz = p1[0]-p0[0],p1[1]-p0[1],0
#                for item in viewer.selection:
#                    item.position = (item.x+dx,item.y+dy,item.z)
#
#                raise StopIteration
#        else:
#            viewer.p0 = None
    #on_mouse_release::
    #    display, event = change['value']
    #    print 'mouse_release',event
    #    raise StopIteration
    key_pressed ::
        key = change['value'][1].text()
        last_key = self.last_key
        self.last_key = key

        log.debug(f"Key sequence {last_key} {key}")

        # Lookup the key sequence
        keymap = self.keymap.get(last_key)
        action = None
        if keymap is not None:
            action = keymap.get(key)

        # Clear the last key after a timeout
        if action is not None:
            deferred_call(action)
            self.last_key = ''
        #else:
        #    timed_call(self.keypress_timeout, setattr, self, 'last_key', '')

    Menu:
        context_menu = True
        Action:
            text = 'Fit all'
            triggered :: viewer.fit_all()
        Action:
            text = 'Fit to selection'
            triggered :: viewer.fit_selection()
        Action:
            text = 'Reset view'
            triggered :: viewer.reset_view()
        Action:
            separator = True
        Menu:
            title = 'Navigation'
            Action:
                text = 'Lock rotation'
                tool_tip = 'Disable rotation with the mouse or touchpad'
                checkable = True
                checked := viewer.lock_rotation
            Action:
                text = 'Lock zoom'
                tool_tip = 'Disable zooming with the mouse or touchpad'
                checkable = True
                checked := viewer.lock_zoom
            Action:
                text = 'Zoom in'
                triggered :: viewer.zoom_factor(2)
            Action:
                text = 'Zoom out'
                triggered :: viewer.zoom_factor(1/2)
            Looper:
                iterable = ('x', 'y', 'z')
                Action:
                    text = 'Rotate %s left' % loop_item
                    tool_tip = 'Rotate view counter clockwise around the %s axis' % loop_item
                    triggered :: viewer.rotate_view({loop_item: math.radians(-90)})
                Action:
                    text = 'Rotate %s right' % loop_item
                    tool_tip = 'Rotate view counter clockwise around the %s axis' % loop_item
                    triggered :: viewer.rotate_view({loop_item: math.radians(90)})


        Action:
            separator = True
        Menu: menu_selection_mode:
            title = 'Selection'
            attr keymap = {
                m[0]: lambda m=m: set_selection_mode(m)
                for m in viewer.get_member('selection_mode').items
            }

            func set_selection_mode(mode):
                if viewer.selection_mode == mode:
                    # Force it if already set
                    viewer.proxy.set_selection_mode(mode)
                else:
                    viewer.selection_mode = mode

            Looper:
                iterable << viewer.get_member('selection_mode').items
                Action:
                    text = loop_item.title()
                    checkable = True
                    checked << viewer.selection_mode == loop_item
                    triggered :: set_selection_mode(loop_item)

        Menu: menu_view_direction:
            title = 'View direction'
            attr keymap = {
                vm[0]: lambda vm=vm: set_view_mode(vm)
                for vm in viewer.get_member('view_mode').items
            }

            func set_view_mode(mode):
                log.debug(f"Set view mode {mode}")
                if viewer.view_mode == mode:
                    # Force it if already set
                    viewer.proxy.set_view_mode(mode)
                else:
                    viewer.view_mode = mode

            Looper:
                iterable << viewer.get_member('view_mode').items
                Action:
                    text = loop_item.title()
                    checkable = True
                    checked << viewer.view_mode == loop_item
                    triggered :: set_view_mode(loop_item)

        Menu:
            title = 'Clip planes'
            Looper:
                iterable = (
                    ('X', (1, 0, 0), 'red'),
                    ('Y', (0, 1, 0), 'blue',),
                    ('Z', (0, 0, 1), 'green')
                )
                Action:
                    text = loop_item[0]
                    attr axis = loop_item[1].index(1)
                    checkable = True
                    checked << axis in viewer.clipped_planes
                    triggered ::
                        # Remove if it already exists
                        if axis in clipped_planes:
                            plns = viewer.clipped_planes.copy()
                            del plns[axis]
                        else:
                            # Create a plus and minus plane
                            maxes = viewer.bbox[3:]

                            d = loop_item[1]
                            low_pln = OccViewerClippedPlane(
                                parent=viewer,
                                direction=d,
                                capping_color=loop_item[2],
                            )

                            # Create for other side by flipping direction and
                            # positioning at the max
                            high_pln = OccViewerClippedPlane(
                                parent=viewer,
                                capping_color=loop_item[2],
                                direction=tuple(-i for i in d),
                                position=tuple(k*maxes[i] for i, k in enumerate(d))
                            )
                            plns = viewer.clipped_planes.copy()
                            plns[axis] = (low_pln, high_pln)

                        # Update
                        viewer.clipped_planes = plns
            Action:
                text = 'Clear all'
                triggered :: viewer.clipped_planes = {}
        Menu: menu_dimensions:
            title = 'Dimensions'
            attr keymap = {
                'l': action_show_length.triggered,
                'r': action_show_radius.triggered,
                'd': action_show_diameter.triggered,
                'a': action_show_angle.triggered,
            }
            Action: action_show_length:
                text = 'Show length'
                tool_tip = 'Add a length dimension from the current selection'
                triggered ::
                    shapes = viewer.get_selected_shapes()
                    if shapes:
                        dims = viewer.dimensions[:]
                        dims.append(
                            LengthDimension(shapes=shapes[0:2]))
                        viewer.dimensions = dims
                        viewer.selection_mode = 'shape' # It changes so stay in sync
            Action: action_show_radius:
                text = 'Show radius'
                tool_tip = 'Add a radius dimension from the current selection'
                triggered ::
                    shapes = viewer.get_selected_shapes()
                    if shapes:
                        dims = viewer.dimensions[:]
                        dims.append(RadiusDimension(shapes=shapes[0:1]))
                        viewer.dimensions = dims
                        viewer.selection_mode = 'shape' # It changes so stay in sync
            Action: action_show_diameter:
                text = 'Show diameter'
                tool_tip = 'Add a diameter dimension from the current selection'
                triggered ::
                    shapes = viewer.get_selected_shapes()
                    if shapes:
                        dims = viewer.dimensions[:]
                        dims.append(DiameterDimension(shapes=shapes[0:1]))
                        viewer.dimensions = dims
                        viewer.selection_mode = 'shape' # It changes so stay in sync
            Action: action_show_angle:
                text = 'Show angle'
                tool_tip = 'Add an angle dimension from the current selection'
                triggered ::
                    shapes = viewer.get_selected_shapes()
                    if shapes:
                        dims = viewer.dimensions[:]
                        dims.append(AngleDimension(shapes=shapes))
                        viewer.dimensions = dims
                        viewer.selection_mode = 'shape' # It changes so stay in sync
            Action:
                text = 'Clear all'
                triggered :: viewer.dimensions = []
        Menu:
            title = 'Rendering'
            Looper:
                iterable << viewer.get_member('display_mode').items
                Action:
                    text = loop_item.title()
                    checked << viewer.display_mode == loop_item
                    checkable = True
                    triggered ::
                        if loop_item == viewer.display_mode:
                            # Force it if already set
                            viewer.proxy.set_display_mode(loop_item)
                        else:
                            viewer.display_mode = loop_item
                        viewer.proxy.update_display()
            Action:
                checkable = True
                text = 'Hidden line removal'
                checked := viewer.hlr
                checked :: viewer.proxy.update_display()
            Action:
                checkable = True
                text = 'Shadows'
                checked := viewer.shadows
                checked :: viewer.proxy.update_display()
            Action:
                checkable = True
                text = 'Raytracing'
                checked := viewer.raytracing
                checked :: viewer.proxy.update_display()
            Action:
                checkable = True
                text = 'Reflections'
                checked := viewer.reflections
                checked :: viewer.proxy.update_display()
            Action:
                checkable = True
                text = 'Antialiasing'
                checked := viewer.antialiasing
                checked :: viewer.proxy.update_display()
            Action:
                checkable = True
                text = 'Draw boundaries'
                checked := viewer.draw_boundaries
                checked :: viewer.proxy.update_display()
        Action:
            separator = True
        Menu:
            title = 'Debug'
            Action:
                text = 'Show console'
                checkable = True
                checked := viewer.show_console
            Action:
                separator = True
            Action:
                text = 'Force update'
                triggered :: viewer.proxy.update_display()
            Action:
                text = 'Clear display'
                triggered :: viewer.clear_display()


enamldef ClippedPlaneRow(Container):
    padding = 0
    attr plane
    attr high_plane
    attr bbox
    attr axis << plane.direction.index(1)
    attr labels = {0: 'X', 1: 'Y', 2: 'Z'}

    constraints = [hbox(label, cbx, sldr),
                   align('v_center', label, cbx, sldr)]
    func set_position(plane, value):
        p = list(plane.position)
        p[axis] = value
        plane.position = tuple(p)
    Label: label:
        text << labels.get(axis, 'Custom')
    CheckBox: cbx:
        checked := plane.enabled
        checked >> high_plane.enabled
    DualSlider: sldr:
        func compute_bounds(vmin, vmax):
            # Divide the value into 100 items
            scale = 100/(vmax - vmin)
            return int(vmin*scale), int(vmax*scale), scale

        # min, max, scale
        attr bounds << compute_bounds(bbox[axis], bbox[axis+3])
        minimum << bounds[0]-1
        maximum << bounds[1]+1
        low_value << int(plane.position[axis]*bounds[2])
        low_value :: set_position(plane, change['value']/bounds[2])
        high_value << int(high_plane.position[axis]*bounds[2])
        high_value :: set_position(high_plane, change['value']/bounds[2])


enamldef ViewerWindow(Window): window:
    #: Window title
    title = "DeclaraCAD"

    #: File to load
    attr filename: str = "-"

    #: Source code to load. If empty the file will be read from disk
    attr source: str = ""

    #: Rendered shapes
    attr models: list = []

    #: Rendered version. Use this to manually trigger re-renders when the source
    #: code changes.
    attr version: int = 1

    #: Hide window frame (when embedding)
    attr frameless: bool = False

    #: IPC protocol for communication with parent process
    attr protocol = None
    alias viewer

    initial_size = (1, 1) if frameless else (960, 480)

    #: Window Icon
    icon = load_icon('logo')

    # When the filename changes, clear the source so it's loaded from the file
    filename ::
        self.source = ""

    activated ::
        if frameless:
            self.proxy.widget.setWindowFlags(Qt.FramelessWindowHint)

    func screenshot(filename):
        # Take a screenshot and save it
        if filename:
            path, ext = os.path.splitext(filename.lower())
            if ext not in ('.bmp', '.png', '.jpeg', '.tiff'):
                raise ValueError("Filename must be a .jpeg, .png, .bmp, or .tiff")
            viewer.take_screenshot(filename)
        return filename

    func load_source():
        if filename != "-":
            with capture_output() as stdout:
                try:
                    # Load the models from source code or disk
                    result = load_model(filename, source)
                    if protocol and protocol.transport:
                        protocol.send_message({'id': 'render_success'})
                    # Clear clipped planes
                    viewer.clipped_planes = {}
                    viewer.dimensions = []
                    return result
                except EmptyFileError as e:
                    # When opening an empty / unsaved file, clear the display
                    viewer.clear_display()
                    if protocol and protocol.transport:
                        protocol.send_message({'id': 'render_success'})
                except Exception as e:
                    # Notify the client that we got an error
                    if protocol and protocol.transport:
                        protocol.send_message({
                            'error':{
                                'message':traceback.format_exc()
                            },
                            'id': 'render_error'
                        })
                    traceback.print_exc()
                finally:
                    if protocol and protocol.transport:
                        protocol.send_message({'id': 'capture_output',
                                               'result': stdout.getvalue()})
                    else:
                        log.info(stdout.getvalue())
        return []
    Container:
        padding = 0
        ModelViewer: viewer:
            selection ::
                e = change['value']
                if protocol and protocol.transport:
                    protocol.send_message({
                        'result': str(e.selection),
                        'id': 'shape_selection'
                    })
            # Load the 3d models and include them in the viewer
            shapes << load_source() if filename and version else []
        Conditional:
            condition << viewer.loading
            ProgressBar:
                value << int(viewer.progress)
                text_visible = True

        Conditional:
            condition << bool(viewer.clipped_planes)

            Container:
                Looper:
                    iterable << viewer.clipped_planes.values()
                    ClippedPlaneRow:
                        plane = loop_item[0]
                        high_plane = loop_item[1]
                        bbox << viewer.bbox


enamldef RemoteViewer(Conditional): viewer:
    attr plugin: ViewerPlugin

    #: Process handle for communication with the child viewer
    attr renderer: ViewerProcess = ViewerProcess(plugin=plugin)
    condition << bool(renderer.window_id)

    func update_backgound(change):
        """ Updates the background color on the viewer """
        plugin = viewer.plugin
        c1 = plugin.background_top
        if not c1:
            return
        if plugin.background_mode == 'solid':
            c2 = c1
        else:
            c2 = plugin.background_bottom
            if not c2:
                return
        renderer.set_background_gradient((c1, c2, plugin.background_fill_method))

    func update_shape_color(change):
        renderer.set_shape_color(plugin.shape_color)
        if change.get('type') == 'update' and renderer.document:
            # Trigger a reload
            renderer.document.version += 1

    func update_trihedron(change):
        renderer.set_trihedron_mode(plugin.trihedron_mode)

    func update_antialiasing(change):
        renderer.set_antialiasing(plugin.renderer_use_antialiasing)

    func update_raytracing(change):
        renderer.set_raytracing(plugin.renderer_use_raytracing)

    func update_shadows(change):
        renderer.set_shadows(plugin.renderer_show_shadows)

    func update_reflections(change):
        renderer.set_reflections(plugin.renderer_show_reflections)

    func update_draw_boundaries(change):
        renderer.set_draw_boundaries(plugin.renderer_draw_boundaries)

    func resync():
        """ Resync all plugin settings """
        for fn in (update_backgound, update_shape_color, update_trihedron,
                   update_antialiasing, update_raytracing, update_shadows,
                   update_draw_boundaries, update_reflections):
            fn({})

    func setup():
        """ Connect all plugin observers """
        plugin = viewer.plugin
        plugin.observe('background_mode', update_backgound)
        plugin.observe('background_top', update_backgound)
        plugin.observe('background_bottom', update_backgound)
        plugin.observe('background_fill_method', update_backgound)
        plugin.observe('trihedron_mode', update_trihedron)
        plugin.observe('shape_color', update_shape_color)

        plugin.observe('renderer_use_antialiasing', update_antialiasing)
        plugin.observe('renderer_use_raytracing', update_raytracing)
        plugin.observe('renderer_show_shadows', update_shadows)
        plugin.observe('renderer_show_reflections', update_reflections)
        plugin.observe('renderer_draw_boundaries', update_draw_boundaries)

        self.resync()

    ScrollArea:
        widget_resizable = True
        # When a window container is used as a child of a QAbstractScrollArea or
        # QMdiArea, it will create a native window for every widget in its
        # parent chain to allow for proper stacking and clipping
        # See https://doc.qt.io/qt-5/qwidget.html#createWindowContainer
        Container:
            padding = 0
            #: Embedded viewer
            EmbeddedWindow: window:
                window_id = renderer.window_id
                activated :: viewer.setup()


enamldef ViewerDockItem(DockItem): view:
    name = "3d-viewer-{}".format(id(self))

    alias renderer: viewer.renderer
    attr editor_plugin << plugin.workbench.get_plugin('declaracad.editor')

    title << "Viewer {}".format(
        format_title(
            editor_plugin.documents, document,
            document.name, document.unsaved
        ) if document else 'active document'
    )

    #: Manually assigned document
    attr document = None
    document :: handle_document_changed(change)
    activated ::
        renderer.document = editor_plugin.active_document
        editor_plugin.observe('active_document', handle_document_changed)

    func get_document():
        return self.document or editor_plugin.active_document

    func handle_document_changed(change):
        """ When the editor active document changes or this view's document
        changes, update the renderer.

        """
        renderer.document = get_document()

    icon = load_icon("bricks")
    stretch = 1
    closed ::
        editor_plugin.unobserve('active_document', handle_document_changed)
        renderer.terminate()
    Container: container:
        padding = 0
        RemoteViewer: viewer:
            plugin << view.plugin

    title_bar_right_clicked ::
        # Populate the documents
        looper.iterable = editor_plugin.documents[:]
        menu.popup()

    Menu: menu:
        Action:
            text = "Split vertically"
            triggered ::
                core = plugin.workbench.get_plugin("enaml.workbench.core")
                core.invoke_command('declaracad.viewer.new_viewer',
                                    {'target': view.name, 'document': document,
                                     'position': 'bottom'})
        Action:
            text = "Split horizontally"
            triggered ::
                core = plugin.workbench.get_plugin("enaml.workbench.core")
                core.invoke_command('declaracad.viewer.new_viewer',
                                    {'target': view.name, 'document': document,
                                     'position': 'right'})
        Action:
            separator = True
        Action:
            text = "Restart viewer"
            triggered :: renderer.terminate()
        Action:
            separator = True
        Action:
            text = "Export screenshot..."
            triggered ::
                core = plugin.workbench.get_plugin("enaml.workbench.core")
                core.invoke_command('declaracad.viewer.screenshot',
                                    {'target': view.name})
        Action:
            separator = True
        Action:
            text = "Reload file"
            triggered ::
                renderer.document = None
                renderer.document = get_document()
        Menu:
            title = "Document"
            Action:
                text = "Active document"
                checkable = True
                checked << view.document is None
                triggered :: view.document = None
            Looper: looper:
                iterable = editor_plugin.documents[:]
                Action:
                    attr doc = loop_item
                    text = format_title(editor_plugin.documents, doc, doc.name, doc.unsaved)
                    checkable = True
                    checked << view.document == loop_item
                    triggered :: view.document = loop_item




