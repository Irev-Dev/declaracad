"""
Copyright (c) 2016-2018, Jairus Martin.

Distributed under the terms of the GPL v3 License.

The full license is in the file LICENSE, distributed with this software.

Created on Sep 28, 2016

@author: jrm
"""
import os
import math
import inspect
import traceback
from atom.api import Atom, Tuple, Str, Callable

import enaml
from enaml.core.api import Looper, Include, Conditional
from enaml.application import timed_call, deferred_call
from enaml.layout.api import align, hbox
from enaml.qt.QtCore import Qt
from enaml.widgets.api import (
    Window, Container, Menu, Action, DualSlider, CheckBox, Label,
    IPythonConsole, ProgressBar, ScrollArea, PopupView, Field, PushButton
)

from declaracad.core.api import DockItem, EmbeddedWindow
from declaracad.core.utils import log, load_icon, capture_output, format_title


from declaracad.occ.widgets.api import OccViewer, OccViewerClippedPlane
from declaracad.occ.dimension import (
    AngleDimension, LengthDimension, RadiusDimension, DiameterDimension
)
from declaracad.occ.plugin import (
    ViewerPlugin, ViewerProcess, load_model, EmptyFileError
)

from declaracad.occ.api import Topology, Point

def expand_dict(p):
    for k, v in p.items():
        for p in v:
            yield p


class ViewerAction(Atom):
    name = Str()
    key = Str()
    action = Callable()


enamldef ActionPopup(PopupView): popup:
    #foreground = 'white'
    #background = 'rgba(30, 30, 30, 0.85)'
    arrow_edge = 'top'
    arrow_size = 20
    anchor_mode = 'cursor'
    anchor = (0.5, 0.5)
    offset = (0, 0)
    attr available_actions: list = []
    attr default_search: str = ""
    attr on_action_clicked = lambda popup, action: popup.close()

    func is_match(text, name):
        return text.lower() in name.lower()

    func get_actions(action, search_text):
        if not search_text:
            return available_actions
        return [a for a in available_actions if is_match(search_text, a.name)]

    Container:
        padding = 10
        Field: search:
            activated :: self.set_focus()
            submit_triggers = ['auto_sync', 'return_pressed']
            text := default_search
        Looper:
            iterable << get_actions(actions, search.text)[0:10]
            PushButton:
                attr action = loop_item
                text = action.name
                clicked :: popup.on_action_clicked(popup, action)


enamldef NotificationPopup(PopupView):
    foreground = 'white'
    background = 'rgba(30, 30, 30, 0.85)'
    window_type = 'tool_tip'
    parent_anchor = (0.0, 0.0)
    anchor = (0.0, 0.0)
    offset = (10, 10)
    timeout = 5
    fade_in_duration = 200
    fade_out_duration = 200
    attr message: str = ""
    Container:
        Label:
            foreground = 'white'
            text << message
            align = 'left'



enamldef ModelViewer(OccViewer): viewer:
    attr p0 = None
    attr clipped_planes: dict = {} # Map axis to tuple of (lower, upper)
    attr dimensions: list = []
    attr shapes: list = []
    attr show_console: bool = False
    attr notification = None
    attr action_search: str = ""
    attr default_actions: list = [
        ViewerAction(name="View iso (vi)", action=keymap['v']['i']),
        ViewerAction(name="View top (vt)", action=keymap['v']['t']),
        ViewerAction(name="View bottom (vb)", action=keymap['v']['b']),
        ViewerAction(name="View left (vl)", action=keymap['v']['l']),
        ViewerAction(name="View front (vf)", action=keymap['v']['f']),
        ViewerAction(name="View right", action=lambda: set_view_mode('right')),
        ViewerAction(name="View rear (vr)", action=lambda: set_view_mode('rear')),
        ViewerAction(name="Fit all (fa)", action=self.fit_all),
        ViewerAction(name="Fit selection (fs)", action=self.fit_selection),
        ViewerAction(name="Reset view (v0)", action=self.reset_view),
        ViewerAction(name="Rotate X -90 (lz)", action=keymap['l']['x']),
        ViewerAction(name="Rotate Y -90 (ly)", action=keymap['l']['y']),
        ViewerAction(name="Rotate Z -90 (lz)", action=keymap['l']['z']),
        ViewerAction(name="Rotate X 90 (rx)", action=keymap['r']['x']),
        ViewerAction(name="Rotate Y 90 (ry)", action=keymap['r']['y']),
        ViewerAction(name="Rotate Z 90 (rz)", action=keymap['r']['z']),
        ViewerAction(name="Select anything (sa)", action=keymap['s']['a']),
        ViewerAction(name="Select shape", action=lambda: set_selection_mode('shape')),
        ViewerAction(name="Select shell", action=lambda: set_selection_mode('shell')),
        ViewerAction(name="Select face (sf)", action=keymap['s']['f']),
        ViewerAction(name="Select edge (se)", action=keymap['s']['e']),
        ViewerAction(name="Select wire (sw)", action=keymap['s']['w']),
        ViewerAction(name="Select vertex (sv)", action=keymap['s']['v']),
        ViewerAction(name="Display length dimension (dl)", action=keymap['d']['l']),
        ViewerAction(name="Display radius dimension (dr)", action=keymap['d']['r']),
        ViewerAction(name="Display diameter dimension (dd)", action=keymap['d']['d']),
        ViewerAction(name="Display angle dimension (da)", action=keymap['d']['a']),
    ]
    attr actions: list = get_actions()

    func get_actions():
        return default_actions

    # Last key event
    attr default_keymap = {
        '': {
            ' ': show_action_popup,
        },
        'd': menu_dimensions.keymap,
        'v': menu_view_direction.keymap,
        's': menu_selection_mode.keymap,
        'l': {
            'x': lambda: viewer.rotate_view(x=math.radians(-90)),
            'y': lambda: viewer.rotate_view(y=math.radians(-90)),
            'z': lambda: viewer.rotate_view(z=math.radians(-90)),
        },
        'r': {
            'x': lambda: viewer.rotate_view(x=math.radians(90)),
            'y': lambda: viewer.rotate_view(y=math.radians(90)),
            'z': lambda: viewer.rotate_view(z=math.radians(90)),
        },
    }

    func get_keymap():
        return default_keymap

    attr keymap = get_keymap()

    attr last_key: str = ""
    attr last_key_count: int = 0
    attr keypress_timeout: int = 2000

    func get_selected_shapes():
        """ Get all selected shapes

        """
        shapes = []
        if self.selection:
            for s in self.selection.selection.values():
                for mapping in s.values():
                    shapes.extend(mapping.values())
        return shapes

    func show_action_popup():
        popup = ActionPopup(
            parent=self,
            available_actions=actions,
            on_action_clicked=on_action_clicked,
            default_search=self.action_search)
        popup.show()

    func on_action_clicked(popup, action):
        action.action()
        popup.close()
        self.action_search = ""

    func render(shapes):
        """ Make sure shapes are initialized """
        for s in shapes:
            if not s.is_initialized:
                s.initialize()
        return shapes

    Include:
        objects << list(expand_dict(clipped_planes))
    Include:
        objects << render(viewer.shapes)
    Include:
        objects << viewer.dimensions

    key_pressed ::
        key = change['value'][1].text()
        last_key = self.last_key
        self.last_key = key

        log.debug(f"Key sequence {last_key} {key}")

        # Lookup the key sequence
        keymap = self.keymap.get(last_key)
        action = None
        if keymap is not None and isinstance(keymap, dict):
            action = keymap.get(key)

        # Clear the last key after a timeout
        if action is not None:
            deferred_call(action)
            self.last_key = ''
        else:
            self.last_key_count += 1
            timed_call(500, clear_last_key)

    func clear_last_key():
        self.last_key_count -= 1
        if self.last_key_count > 0:
            return
        self.last_key = ''

    func describe_shape(shape_type, topods_shape):
        if shape_type == 'vertex':
            v = Point(Topology.cast_shape(topods_shape))
            return [f"  Vertex: {v[:]}"]
        elif shape_type == 'edge':
            topology = Topology(shape=topods_shape)
            verticies = topology.number_of_vertices()
            length = topology.length(topods_shape)
            desc = [
                f"  Edge: {verticies} vertices",
                f"  Length: {length}"
            ]

            return desc

    func describe_selection(selection):
        if not selection or not selection.selection:
            return 'Nothing selected'
        desc = []
        try:
            for d, items in selection.selection.items():
                if desc:
                    desc.append("")

                if d is not None:
                    desc.append(f"{d.__class__.__name__}:")
                elif len(items) == 1:
                    for shape_type, mapping in items.items():
                        shape_type = shape_type[:-1]
                        desc.append(f"{shape_type.title()}:")
                else:
                    desc.append(f"Unknown:")
                if d and d.name:
                    desc.append(f"  Name: {d.name}")
                #pos = d.position
                #desc.append(f"  Position: {pos.x}, {pos.y}, {pos.z}")
                for shape_type, mapping in items.items():
                    n = len(mapping)
                    keys = ', '.join(map(str, sorted(mapping.keys())))
                    if n == 1:
                        shape_type = shape_type[:-1]
                    desc.append(f"  Topoolgy: {n} {shape_type}")
                    desc.append(f"  Indices: {keys}")
                    if n == 1:
                        for k, v in mapping.items():
                            shape_desc = describe_shape(shape_type, v)
                            if shape_desc:
                                desc.extend(shape_desc)

                if d and d.description:
                    desc.append(f"  {d.description}")
        except Exception as e:
            log.exception(e)

        return "\n".join(desc)

    func hide_notification():
        if self.notification:
            self.notification.close()

    func show_notification(message):
        self.hide_notification()
        popup = NotificationPopup(self, message=message)
        popup.show()
        self.notification = popup

    selection ::
        if selection and selection.selection:
            self.show_notification(message=describe_selection(selection))
        else:
            self.hide_notification()

    Menu:
        context_menu = True
        Action:
            text = 'Fit all'
            triggered :: viewer.fit_all()
        Action:
            text = 'Fit to selection'
            triggered :: viewer.fit_selection()
        Action:
            text = 'Reset view'
            triggered :: viewer.reset_view()
        Action:
            separator = True
        Menu:
            title = 'Navigation'
            Action:
                text = 'Lock rotation'
                tool_tip = 'Disable rotation with the mouse or touchpad'
                checkable = True
                checked := viewer.lock_rotation
            Action:
                text = 'Lock zoom'
                tool_tip = 'Disable zooming with the mouse or touchpad'
                checkable = True
                checked := viewer.lock_zoom
            Action:
                text = 'Zoom in'
                triggered :: viewer.zoom_factor(2)
            Action:
                text = 'Zoom out'
                triggered :: viewer.zoom_factor(1/2)
            Looper:
                iterable = ('x', 'y', 'z')
                Action:
                    text = 'Rotate %s left' % loop_item
                    tool_tip = 'Rotate view counter clockwise around the %s axis' % loop_item
                    triggered :: viewer.rotate_view({loop_item: math.radians(-90)})
                Action:
                    text = 'Rotate %s right' % loop_item
                    tool_tip = 'Rotate view counter clockwise around the %s axis' % loop_item
                    triggered :: viewer.rotate_view({loop_item: math.radians(90)})


        Action:
            separator = True
        Menu: menu_selection_mode:
            title = 'Selection'
            attr keymap = {
                m[0]: lambda m=m: set_selection_mode(m)
                for m in viewer.get_member('selection_mode').items
            }

            func set_selection_mode(mode):
                if viewer.selection_mode == mode:
                    # Force it if already set
                    viewer.proxy.set_selection_mode(mode)
                else:
                    viewer.selection_mode = mode

            Looper:
                iterable << viewer.get_member('selection_mode').items
                Action:
                    text = loop_item.title()
                    checkable = True
                    checked << viewer.selection_mode == loop_item
                    triggered :: set_selection_mode(loop_item)

        Menu: menu_view_direction:
            title = 'View direction'
            attr keymap = {
                vm[0]: lambda vm=vm: set_view_mode(vm)
                for vm in viewer.get_member('view_mode').items
            }

            func set_view_mode(mode):
                log.debug(f"Set view mode {mode}")
                if viewer.view_mode == mode:
                    # Force it if already set
                    viewer.proxy.set_view_mode(mode)
                else:
                    viewer.view_mode = mode

            Looper:
                iterable << viewer.get_member('view_mode').items
                Action:
                    text = loop_item.title()
                    checkable = True
                    checked << viewer.view_mode == loop_item
                    triggered :: set_view_mode(loop_item)

        Menu:
            title = 'Clip planes'
            Looper:
                iterable = (
                    ('X', (1, 0, 0), 'red'),
                    ('Y', (0, 1, 0), 'blue',),
                    ('Z', (0, 0, 1), 'green')
                )
                Action:
                    text = loop_item[0]
                    attr axis = loop_item[1].index(1)
                    checkable = True
                    checked << axis in viewer.clipped_planes
                    triggered ::
                        # Remove if it already exists
                        if axis in clipped_planes:
                            plns = viewer.clipped_planes.copy()
                            del plns[axis]
                        else:
                            # Create a plus and minus plane
                            maxes = viewer.bbox[3:]

                            d = loop_item[1]
                            low_pln = OccViewerClippedPlane(
                                parent=viewer,
                                direction=d,
                                capping_color=loop_item[2],
                            )

                            # Create for other side by flipping direction and
                            # positioning at the max
                            high_pln = OccViewerClippedPlane(
                                parent=viewer,
                                capping_color=loop_item[2],
                                direction=tuple(-i for i in d),
                                position=tuple(k*maxes[i] for i, k in enumerate(d))
                            )
                            plns = viewer.clipped_planes.copy()
                            plns[axis] = (low_pln, high_pln)

                        # Update
                        viewer.clipped_planes = plns
            Action:
                text = 'Clear all'
                triggered :: viewer.clipped_planes = {}
        Menu: menu_dimensions:
            title = 'Dimensions'
            attr keymap = {
                'l': action_show_length.triggered,
                'r': action_show_radius.triggered,
                'd': action_show_diameter.triggered,
                'a': action_show_angle.triggered,
            }
            Action: action_show_length:
                text = 'Show length'
                tool_tip = 'Add a length dimension from the current selection'
                triggered ::
                    shapes = viewer.get_selected_shapes()
                    if shapes:
                        dims = viewer.dimensions[:]
                        dims.append(
                            LengthDimension(shapes=shapes[0:2]))
                        viewer.dimensions = dims
                        viewer.selection_mode = 'shape' # It changes so stay in sync
            Action: action_show_radius:
                text = 'Show radius'
                tool_tip = 'Add a radius dimension from the current selection'
                triggered ::
                    shapes = viewer.get_selected_shapes()
                    if shapes:
                        dims = viewer.dimensions[:]
                        dims.append(RadiusDimension(shapes=shapes[0:1]))
                        viewer.dimensions = dims
                        viewer.selection_mode = 'shape' # It changes so stay in sync
            Action: action_show_diameter:
                text = 'Show diameter'
                tool_tip = 'Add a diameter dimension from the current selection'
                triggered ::
                    shapes = viewer.get_selected_shapes()
                    if shapes:
                        dims = viewer.dimensions[:]
                        dims.append(DiameterDimension(shapes=shapes[0:1]))
                        viewer.dimensions = dims
                        viewer.selection_mode = 'shape' # It changes so stay in sync
            Action: action_show_angle:
                text = 'Show angle'
                tool_tip = 'Add an angle dimension from the current selection'
                triggered ::
                    shapes = viewer.get_selected_shapes()
                    if shapes:
                        dims = viewer.dimensions[:]
                        dims.append(AngleDimension(shapes=shapes))
                        viewer.dimensions = dims
                        viewer.selection_mode = 'shape' # It changes so stay in sync
            Action:
                text = 'Clear all'
                triggered :: viewer.dimensions = []
        Menu:
            title = 'Rendering'
            Looper:
                iterable << viewer.get_member('display_mode').items
                Action:
                    text = loop_item.title()
                    checked << viewer.display_mode == loop_item
                    checkable = True
                    triggered ::
                        if loop_item == viewer.display_mode:
                            # Force it if already set
                            viewer.proxy.set_display_mode(loop_item)
                        else:
                            viewer.display_mode = loop_item
                        viewer.proxy.update_display()
            Action:
                checkable = True
                text = 'Hidden line removal'
                checked := viewer.hidden_line_removal
                checked :: viewer.proxy.update_display()
            Action:
                checkable = True
                text = 'Shadows'
                checked := viewer.shadows
                checked :: viewer.proxy.update_display()
            Action:
                checkable = True
                text = 'Raytracing'
                checked := viewer.raytracing
                checked :: viewer.proxy.update_display()
            Action:
                checkable = True
                text = 'Reflections'
                checked := viewer.reflections
                checked :: viewer.proxy.update_display()
            Action:
                checkable = True
                text = 'Antialiasing'
                checked := viewer.antialiasing
                checked :: viewer.proxy.update_display()
            Action:
                checkable = True
                text = 'Draw boundaries'
                checked := viewer.draw_boundaries
                checked :: viewer.proxy.update_display()
        Action:
            separator = True
        Menu:
            title = 'Debug'
            Action:
                text = 'Show console'
                checkable = True
                checked := viewer.show_console
            Action:
                separator = True
            Action:
                text = 'Force update'
                triggered :: viewer.proxy.update_display()
            Action:
                text = 'Clear display'
                triggered :: viewer.clear_display()


enamldef ClippedPlaneRow(Container):
    padding = 0
    attr plane
    attr high_plane
    attr bbox
    attr axis << plane.direction.index(1)
    attr labels = {0: 'X', 1: 'Y', 2: 'Z'}

    constraints = [hbox(label, cbx, sldr),
                   align('v_center', label, cbx, sldr)]
    func set_position(plane, value):
        p = list(plane.position)
        p[axis] = value
        plane.position = tuple(p)
    Label: label:
        text << labels.get(axis, 'Custom')
    CheckBox: cbx:
        checked := plane.enabled
        checked >> high_plane.enabled
    DualSlider: sldr:
        func compute_bounds(vmin, vmax):
            # Divide the value into 100 items
            scale = 100/(vmax - vmin)
            return int(vmin*scale), int(vmax*scale), scale

        # min, max, scale
        attr bounds << compute_bounds(bbox[axis], bbox[axis+3])
        minimum << bounds[0]-1
        maximum << bounds[1]+1
        low_value << int(plane.position[axis]*bounds[2])
        low_value :: set_position(plane, change['value']/bounds[2])
        high_value << int(high_plane.position[axis]*bounds[2])
        high_value :: set_position(high_plane, change['value']/bounds[2])


enamldef ViewerWindow(Window): window:
    #: Window title
    title = "DeclaraCAD"

    #: File to load
    attr filename: str = "-"

    #: Source code to load. If empty the file will be read from disk
    attr source: str = ""

    #: Rendered shapes
    attr models: list = []

    #: Rendered version. Use this to manually trigger re-renders when the source
    #: code changes.
    attr version: int = 1

    #: Hide window frame (when embedding)
    attr frameless: bool = False

    #: IPC protocol for communication with parent process
    attr protocol = None
    alias viewer

    initial_size = (1, 1) if frameless else (960, 480)

    #: Window Icon
    icon = load_icon('logo')

    # When the filename changes, clear the source so it's loaded from the file
    filename ::
        self.source = ""

    activated ::
        if frameless:
            self.proxy.widget.setWindowFlags(Qt.FramelessWindowHint)

    func screenshot(filename):
        # Take a screenshot and save it
        if filename:
            path, ext = os.path.splitext(filename.lower())
            if ext not in ('.bmp', '.png', '.jpeg', '.tiff'):
                raise ValueError("Filename must be a .jpeg, .png, .bmp, or .tiff")
            viewer.take_screenshot(filename)
        return filename

    func send_move_to():
        """ Remotely invoke a move to command if a vertex is selected

        """
        if not viewer.selection:
            log.debug("No selection")
            return

        for d, items in viewer.selection.selection.items():
            mapping = items.get('vertexs')
            if not mapping:
                continue
            for index, shape in mapping.items():
                point = Point(Topology.cast_shape(shape))
                return send_message(
                    id='invoke_command',
                    command_id='declaracad.cnc.rapid_move_to',
                    parameters={'point': point})
        log.debug("No point found")

    func send_message(**params):
        """ Send a message to the application over the IPC interface
        if this view is being used remotely

        Parameters
        ----------
        params: Dict
            Items to send in the message. Must be json serailizable.

        """
        if protocol and protocol.transport:
            protocol.send_message(params)

    func load_source():
        if filename != "-":
            with capture_output() as stdout:
                try:
                    # Load the models from source code or disk
                    result = load_model(filename, source)
                    send_message(id='render_success')
                    # Clear clipped planes
                    viewer.clipped_planes = {}
                    viewer.dimensions = []
                    return result
                except EmptyFileError as e:
                    # When opening an empty / unsaved file, clear the display
                    viewer.clear_display()
                    send_message(id='render_success')
                except Exception as e:
                    # Notify the client that we got an error
                    send_message(
                        id='render_error',
                        error={'message':traceback.format_exc()})
                    traceback.print_exc()
                finally:
                    if protocol:
                        send_message(id='capture_output',
                                          result=stdout.getvalue())
                    else:
                        log.info(stdout.getvalue())
        return []
    Container:
        padding = 0
        ModelViewer: viewer:
            selection ::
                e = change['value']
                send_message(id='shape_selection', result=str(e.selection))
            # Load the 3d models and include them in the viewer
            shapes << load_source() if filename and version else []


            get_actions => ():
                return viewer.default_actions + [
                    ViewerAction(name="Rapid move to (mt)", action=keymap['m']['t']),
                ]

            get_keymap => ():
                km = viewer.default_keymap
                km.update({
                    'm': {
                        't': window.send_move_to,
                    }
                })
                return km

        Conditional:
            condition << viewer.show_console
            IPythonConsole:
                initial_ns = {
                    'viewer': viewer,
                }
                minimum_size = (640, 240)
        Conditional:
            condition << viewer.loading
            ProgressBar:
                value << int(viewer.progress)
                text_visible = True

        Conditional:
            condition << bool(viewer.clipped_planes)

            Container:
                Looper:
                    iterable << viewer.clipped_planes.values()
                    ClippedPlaneRow:
                        plane = loop_item[0]
                        high_plane = loop_item[1]
                        bbox << viewer.bbox


enamldef RemoteViewer(Container): remote_viewer:
    attr plugin: ViewerPlugin
    padding = 0

    #: Process handle for communication with the child viewer
    attr renderer: ViewerProcess = ViewerProcess(plugin=plugin)

    #: Restart it on initial launch
    activated :: renderer.restart()

    func update_background(change):
        """ Updates the background color on the viewer """
        c1 = plugin.background_top
        if plugin.background_mode == 'solid':
            c2 = c1
        else:
            c2 = plugin.background_bottom
        renderer.set_background_gradient((c1, c2, plugin.background_fill_method))

    func update_grid_colors(change):
        c1 = plugin.grid_minor_color
        c2 = plugin.grid_major_color
        renderer.set_grid_colors((c1, c2))

    # Since this is a remote viewer changes have to be passed manually
    func update_viewer(change):
        setter = getattr(renderer, f'set_{change["name"]}')
        setter(change['value'])
        if change['type'] == 'update':
            renderer.redraw()

    #: Mapping of plugin attr name to the update function
    attr observers = {}

    func bind():
        """ Bind all plugin observers """
        if self.observers:
            self.unbind()
        for m in plugin.get_viewer_members():
            # If the member was tagged with a viewer
            fn = getattr(self, f'update_{m.metadata["viewer"]}', update_viewer)
            plugin.observe(m.name, fn)
            self.observers[m.name] = fn
        self.resync()

    func resync():
        """ Resync all viewer plugin settings """
        called = set()
        for name, fn in observers.items():
            if fn in called:
                continue
            fn({'name': name, 'value': getattr(plugin, name), 'type': 'create'})
            called.add(fn)

    func unbind():
        """ Unbind all plugin observers """
        for n, fn in observers.items():
            plugin.unobserve(n, fn)

    func cleanup():
        try:
            renderer.terminate()
            unbind_observers()
        except:
            pass

    ScrollArea:
        widget_resizable = True
        # When a window container is used as a child of a QAbstractScrollArea or
        # QMdiArea, it will create a native window for every widget in its
        # parent chain to allow for proper stacking and clipping
        # See https://doc.qt.io/qt-5/qwidget.html#createWindowContainer
        Container:
            padding = 0
            Conditional:
                condition << bool(renderer.window_id)
                EmbeddedWindow: window:
                    # Embedded viewer
                    window_id = renderer.window_id
                    activated ::
                        try:
                            remote_viewer.bind()
                        except Exception as e:
                            log.error("Failed to setup remote viewer:")
                            log.exception(e)


enamldef ViewerDockItem(DockItem): view:
    name = "3d-viewer-{}".format(id(self))

    alias renderer: viewer.renderer
    attr editor_plugin << plugin.workbench.get_plugin('declaracad.editor')

    title << "Viewer {}".format(format_title(
        editor_plugin.documents, active_document,
        active_document.name, active_document.unsaved
    ))

    # If set the viewer says on this file even if the editor_plugin document
    # changes
    attr document = None

    # When either changes update the renderer
    attr active_document << self.document or editor_plugin.active_document
    active_document :: renderer.document = change['value']

    icon = load_icon("bricks")
    stretch = 1
    closed :: viewer.cleanup()

    func reload_document():
        renderer.document = None
        renderer.document = active_document

    RemoteViewer: viewer:
        plugin << view.plugin
        activated :: renderer.document = active_document

    title_bar_right_clicked ::
        # Populate the documents
        looper.iterable = editor_plugin.documents[:]
        menu.popup()

    Menu: menu:
        Action:
            text = "Split vertically"
            triggered ::
                core = plugin.workbench.get_plugin("enaml.workbench.core")
                core.invoke_command('declaracad.viewer.new_viewer',
                                    {'target': view.name, 'document': document,
                                     'position': 'bottom'})
        Action:
            text = "Split horizontally"
            triggered ::
                core = plugin.workbench.get_plugin("enaml.workbench.core")
                core.invoke_command('declaracad.viewer.new_viewer',
                                    {'target': view.name, 'document': document,
                                     'position': 'right'})
        Action:
            separator = True
        Action:
            text = "Restart viewer"
            triggered :: renderer.terminate()
        Action:
            text = "Reload document"
            triggered :: reload_document()
        Action:
            separator = True
        Action:
            text = "Export screenshot..."
            triggered ::
                core = plugin.workbench.get_plugin("enaml.workbench.core")
                core.invoke_command('declaracad.viewer.screenshot',
                                    {'target': view.name})
        Menu:
            title = "Document"
            Action:
                text = "Active document"
                checkable = True
                checked << view.document is None
                triggered :: view.document = None
            Looper: looper:
                iterable = editor_plugin.documents[:]
                Action:
                    attr doc = loop_item
                    text = format_title(editor_plugin.documents, doc, doc.name, doc.unsaved)
                    checkable = True
                    checked << view.document == loop_item
                    triggered :: view.document = loop_item
