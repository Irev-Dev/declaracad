# This file is used to configure the AppVeyor CI system, for testing on Windows machines.
#
# Code based on https://github.com/nucleic/enaml/
#
# To test with AppVeyor:
#    Register on appveyor.com with your GitHub account.
#    Create a new appveyor project, using the GitHub details.
#    Ideally, configure notifications to post back to GitHub. (Untested)

branches:
  only:
    - master

environment:
    matrix:
        - NAME: "Py 3.6"
          PYTHON: "C:\\Python3.6-x64"
          PYTHON_VERSION: "3.6"
          PYTHON_ARCH: "64"


install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }

  # this installs the appropriate Miniconda (Py2/Py3, 32/64 bit),
  # as well as pip, conda-build, and the binstar CLI
  - ECHO "Installing minconda:"
  - ps: .\\installconda.ps1
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Dump some debugging information about the machine.
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  - ECHO "Build Folder:"
  - ps: ls $env:APPVEYOR_BUILD_FOLDER

  - ECHO "Environment Variables"
  - set

  # Prepare Miniconda
  # - Avoid warning from conda info.
  # - Dump the setup for debugging.
  # - Upgrade to the latest version of pip to avoid it displaying warnings
  #   about it being out of date.
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - conda info -a

  # Install python, conda build, and anaconda-client
  - conda install python=$PYTHON anaconda-client conda-build -q

  # Install depencencies
  - conda install -c trelau -c conda-forge pyocct -q

  # Install testing utils
  - pip install pytest pytest-coverage pytest-qt codecov

# Use the script
build: off

build_script:

  - cd %APPVEYOR_BUILD_DIR%

  # Install declaracad
  - pip install -e .

  # Build the conda package
  # - conda build recipe -c conda-forge -c trelau -c codelv

test_script:

  # Run the project tests
  - cd %APPVEYOR_BUILD_DIR%
  - pytest tests -v --cov declaracad --cov-report xml

after_test:
  - ps: |
      $env:PATH = 'C:\msys64\usr\bin;' + $env:PATH
      Invoke-WebRequest -Uri 'https://codecov.io/bash' -OutFile codecov.sh
      bash codecov.sh

  # Build installer
  - constructor recipe

artifacts:
    - path: DeclaraCAD-*.exe
